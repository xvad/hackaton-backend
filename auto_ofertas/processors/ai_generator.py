import os
import json
import uuid
from typing import Dict, Any, List
from docx import Document
from openai import OpenAI
from ..config import Config
from .parser import parse_licitacion_dinamica

class AIGenerator:
    def __init__(self, modelo_backend: str = None):
        self.client = OpenAI(api_key=Config.OPENAI_API_KEY)
        self.modelo_backend = modelo_backend or Config.MODEL_NAME
        self.ofertas_historicas = []
        self.licitaciones_historicas = []
        
    def cargar_datos_historicos(self, ofertas_dir: str, licitaciones_dir: str):
        """Carga y procesa datos hist√≥ricos para usar como base de conocimiento"""
        print("üìö Cargando datos hist√≥ricos...")
        
        # Cargar ofertas t√©cnicas hist√≥ricas
        ofertas_count = 0
        for filename in os.listdir(ofertas_dir):
            if filename.endswith('.docx') or filename.endswith('.pdf'):
                file_path = os.path.join(ofertas_dir, filename)
                try:
                    oferta = parse_licitacion_dinamica(file_path)
                    oferta['archivo_origen'] = filename
                    self.ofertas_historicas.append(oferta)
                    ofertas_count += 1
                except Exception as e:
                    print(f"Error procesando oferta {filename}: {e}")
        
        # Cargar licitaciones hist√≥ricas
        licitaciones_count = 0
        for filename in os.listdir(licitaciones_dir):
            if filename.endswith('.docx') or filename.endswith('.pdf'):
                file_path = os.path.join(licitaciones_dir, filename)
                try:
                    licitacion = parse_licitacion_dinamica(file_path)
                    licitacion['archivo_origen'] = filename
                    self.licitaciones_historicas.append(licitacion)
                    licitaciones_count += 1
                except Exception as e:
                    print(f"Error procesando licitaci√≥n {filename}: {e}")
        
        print(f"‚úÖ Datos cargados: {ofertas_count} ofertas, {licitaciones_count} licitaciones")

    def generar_oferta_json_dinamico(self, licitacion_path: str, empresa_nombre: str, empresa_descripcion: str = "") -> Dict[str, Any]:
        """Genera una oferta t√©cnica en formato JSON din√°mico usando ofertas hist√≥ricas como base"""
        # Extraer estructura din√°mica de la licitaci√≥n
        licitacion_dict = parse_licitacion_dinamica(licitacion_path)
        
        # Crear prompt con contexto de ofertas hist√≥ricas
        prompt = self._crear_prompt_con_historico(licitacion_dict, empresa_nombre, empresa_descripcion)
        
        # Llamar a la IA
        respuesta_json = self._generar_json_con_ia(prompt, licitacion_dict)
        return respuesta_json

    def generar_oferta_multiple_licitaciones(self, licitaciones: List[Dict[str, Any]], empresa_nombre: str, empresa_descripcion: str = "") -> Dict[str, Any]:
        """Genera una oferta t√©cnica analizando m√∫ltiples licitaciones y calculando todos los par√°metros con IA"""
        
        print("ü§ñ Iniciando generaci√≥n de oferta m√∫ltiple con an√°lisis inteligente...")
        
        # Paso 1: An√°lisis detallado de las licitaciones para extraer informaci√≥n clave
        analisis_proyecto = self._analizar_licitaciones_detallado(licitaciones)
        
        # Paso 2: Calcular par√°metros del proyecto usando IA
        parametros_proyecto = self._calcular_parametros_proyecto_ia(licitaciones, analisis_proyecto, empresa_nombre)
        
        # Paso 3: Generar estructura base
        estructura_base = self._generar_estructura_base(parametros_proyecto, empresa_nombre)
        
        # Paso 4: Generar contenido secci√≥n por secci√≥n
        estructura_base = self._generar_contenido_por_secciones(estructura_base, licitaciones, analisis_proyecto, parametros_proyecto)
        
        print("‚úÖ Oferta m√∫ltiple generada exitosamente con par√°metros calculados por IA")
        return estructura_base

    def generar_oferta_estructurada(self, licitaciones: List[Dict[str, Any]], empresa_nombre: str, empresa_descripcion: str = "", nombre_proyecto: str = "Proyecto", cliente: str = "Cliente", fecha: str = "2025", costo_total: int = 45000000, plazo: str = "5 meses") -> Dict[str, Any]:
        """Genera una oferta t√©cnica en formato estructurado con secciones organizadas"""
        
        # Primero, analizar las licitaciones para entender el proyecto
        analisis_proyecto = self._analizar_licitaciones_detallado(licitaciones)
        
        # Crear prompt espec√≠fico con el an√°lisis previo
        prompt = self._crear_prompt_estructura_json_mejorado(licitaciones, analisis_proyecto, empresa_nombre, empresa_descripcion, nombre_proyecto, cliente, fecha, costo_total, plazo)
        
        # Generar JSON estructurado usando IA
        try:
            respuesta_json = self._generar_json_estructurado_con_ia(prompt, nombre_proyecto, cliente, fecha, costo_total, plazo, empresa_nombre)
            
            # Mejorar secciones espec√≠ficas con an√°lisis adicional
            respuesta_json = self._mejorar_secciones_especificas(respuesta_json, analisis_proyecto, licitaciones)
            
            return respuesta_json
        except Exception as e:
            print(f"Error generando JSON estructurado: {e}")
            # Fallback: generar estructura b√°sica con par√°metros personalizados
            return self._generar_estructura_fallback(nombre_proyecto, cliente, fecha, costo_total, plazo, empresa_nombre)

    def _determinar_tipo_contenido(self, contenido: str) -> str:
        """Determina el tipo de contenido basado en su estructura"""
        contenido_str = str(contenido).lower()
        
        # Detectar listas
        if any(marker in contenido_str for marker in ["‚Ä¢", "-", "*", "1.", "2.", "3."]):
            return "list"
        
        # Detectar tablas (contenido con estructura de tabla)
        if "|" in contenido_str or "tabla" in contenido_str or "columnas" in contenido_str:
            return "table"
        
        # Por defecto es texto
        return "text"

    def _generar_secciones_adicionales(self, empresa_nombre: str, cliente: str, costo_total: int, plazo: str) -> List[Dict[str, Any]]:
        """Genera secciones adicionales que pueden faltar"""
        secciones_adicionales = []
        
        # Secci√≥n de Funcionalidades Clave del Sistema
        secciones_adicionales.append({
            "title": "Funcionalidades Clave del Sistema",
            "type": "text",
            "content": "El sistema considera los siguientes m√≥dulos principales:\n\n‚Ä¢ Gestor de Competencias: M√≥dulo en el cual el usuario Administrador podr√° crear, editar, organizar y actualizar competencias transversales que se eval√∫an en la instituci√≥n. Estas competencias estar√°n alineadas al modelo educativo del cliente y podr√°n configurarse seg√∫n niveles formativos, carreras, sedes y campus.\n\n‚Ä¢ Gestor de R√∫bricas de Evaluaci√≥n: M√≥dulo en el cual el usuario Administrador podr√° crear, agregar, modificar y/o eliminar las distintas r√∫bricas de evaluaci√≥n para cada competencia transversal, en cada uno de sus niveles formativos.\n\n‚Ä¢ M√≥dulo de Evaluaci√≥n y Seguimiento: M√≥dulo en el cual tanto los usuarios finales como los supervisores podr√°n realizar procesos de evaluaci√≥n y autoevaluaci√≥n.\n\n‚Ä¢ Panel de Control y Reporter√≠a Avanzada: M√≥dulo central de gesti√≥n estrat√©gica donde el Administrador podr√° monitorear el uso del sistema, analizar indicadores clave de desempe√±o y generar reportes personalizados."
        })
        
        # Secci√≥n de Infraestructura Tecnol√≥gica
        secciones_adicionales.append({
            "title": "Infraestructura Tecnol√≥gica",
            "type": "text",
            "content": "La soluci√≥n propuesta contempla una infraestructura tecnol√≥gica moderna, escalable y segura:\n\n‚Ä¢ Backend: Framework Django sobre Python, permitiendo una arquitectura robusta, modular y f√°cilmente integrable con sistemas existentes.\n\n‚Ä¢ Frontend: Desarrollo basado en React con TypeScript, utilizado para la construcci√≥n de interfaces de usuario din√°micas, interactivas y reutilizables.\n\n‚Ä¢ Base de Datos: Uso combinado de PostgreSQL (para datos estructurados relacionales) y MongoDB (para datos semiestructurados).\n\n‚Ä¢ Infraestructura: Implementaci√≥n sobre servidores Linux utilizando contenedores con Docker y orquestaci√≥n a trav√©s de Kubernetes.\n\n‚Ä¢ Integraciones: API RESTful para integraci√≥n bidireccional con sistemas existentes, autenticaci√≥n unificada con Microsoft EntraID o sistemas similares."
        })
        
        # Secci√≥n de Equipo de Trabajo Asignado (tabla)
        secciones_adicionales.append({
            "title": "Equipo de Trabajo Asignado",
            "type": "table",
            "content": {
                "headers": ["Rol", "Responsabilidades Principales", "Experiencia Requerida"],
                "rows": [
                    ["Project Manager", "Planificaci√≥n, coordinaci√≥n y control del proyecto. Interacci√≥n directa con el equipo del cliente", "M√°s de 10 a√±os en gesti√≥n de proyectos tecnol√≥gicos"],
                    ["Tech Lead / Arquitecto", "Define la arquitectura del sistema, est√°ndares t√©cnicos y lineamientos de integraci√≥n", "Experiencia en arquitecturas de sistemas educativos"],
                    ["Front-End Developer", "Desarrolla la interfaz de usuario seg√∫n principios de usabilidad y accesibilidad", "React, TypeScript, dise√±o responsive"],
                    ["Back-End Developer", "Desarrolla la l√≥gica de negocio, APIs RESTful y control de flujos de datos", "Django, Python, APIs RESTful"],
                    ["UX/UI Designer", "Dise√±a la experiencia y la interfaz de usuario, intuitiva e inclusiva", "Dise√±o centrado en usuario, accesibilidad"],
                    ["QA / Tester Funcional", "Dise√±a y ejecuta pruebas automatizadas y manuales", "Testing automatizado, casos de uso educativos"],
                    ["DevSecOps", "Gestiona entornos en la nube, automatiza despliegues, configura monitoreo", "Docker, Kubernetes, AWS/Azure"]
                ]
            }
        })
        
        # Secci√≥n de Metodolog√≠a de Implementaci√≥n
        secciones_adicionales.append({
            "title": "Metodolog√≠a de Implementaci√≥n",
            "type": "text",
            "content": f"La implementaci√≥n se realizar√° bajo la modalidad \"llave en mano\", utilizando un enfoque metodol√≥gico basado en Disciplined Agile del PMI:\n\nFase 1 - Inception (1 mes):\n‚Ä¢ Refinamiento del alcance y visi√≥n del producto\n‚Ä¢ Consolidaci√≥n del equipo multidisciplinario\n‚Ä¢ Consolidaci√≥n de la arquitectura t√©cnica\n‚Ä¢ Confirmaci√≥n del backlog inicial y priorizaci√≥n de requisitos\n\nFase 2 - Construction (3 meses):\n‚Ä¢ Desarrollo incremental de los m√≥dulos\n‚Ä¢ Iteraciones cortas (1-2 semanas) con demostraciones frecuentes\n‚Ä¢ Implementaci√≥n progresiva de las integraciones\n‚Ä¢ Pruebas t√©cnicas continuas\n\nFase 3 - Transition (1 mes):\n‚Ä¢ Pruebas finales y transferencia tecnol√≥gica\n‚Ä¢ Capacitaci√≥n de personal t√©cnico\n‚Ä¢ Despliegue en producci√≥n\n‚Ä¢ Activaci√≥n de plan de soporte"
        })
        
        # Secci√≥n de Garant√≠as y Soporte Post-implementaci√≥n
        secciones_adicionales.append({
            "title": "Garant√≠as y Soporte Post-implementaci√≥n",
            "type": "text",
            "content": f"{empresa_nombre} ofrece una pol√≠tica de garant√≠a y soporte post-implementaci√≥n que asegura la continuidad operativa del sistema:\n\nGarant√≠a T√©cnica (6 meses):\n‚Ä¢ Correcci√≥n sin costo de errores funcionales, bugs o defectos atribuibles al c√≥digo fuente\n‚Ä¢ Correcci√≥n de errores de configuraci√≥n en los entornos implementados\n‚Ä¢ Revisi√≥n y ajuste de integraciones con sistemas institucionales\n‚Ä¢ Actualizaci√≥n de la documentaci√≥n t√©cnica cuando se aplique alguna correcci√≥n\n\nSoporte Acompa√±ado:\n‚Ä¢ Resoluci√≥n de consultas operativas y funcionales para usuarios autorizados\n‚Ä¢ Acompa√±amiento en el monitoreo de integraciones y flujos cr√≠ticos\n‚Ä¢ Aplicaci√≥n de ajustes menores de configuraci√≥n\n‚Ä¢ Participaci√≥n en reuniones t√©cnicas mensuales\n\nClasificaci√≥n de Incidencias:\n‚Ä¢ Nivel 1 (Cr√≠tico): 2 horas h√°biles de respuesta\n‚Ä¢ Nivel 2 (Medio): 8 horas h√°biles de respuesta\n‚Ä¢ Nivel 3 (Leve): 24 horas h√°biles de respuesta"
        })
        
        # Secci√≥n de Tipos de Usuarios y Permisos
        secciones_adicionales.append({
            "title": "Tipos de Usuarios y Permisos",
            "type": "table",
            "content": {
                "headers": ["Perfil de Usuario", "Descripci√≥n", "Permisos Principales"],
                "rows": [
                    ["Administrador", "Equipo de gesti√≥n institucional, direcci√≥n acad√©mica o soporte TI", "Crear/editar competencias, gestionar r√∫bricas, configurar calendarios, supervisar uso del sistema"],
                    ["Jefe de Carrera", "Docente o acad√©mico con responsabilidad sobre coordinaci√≥n de programas", "Visualizar resultados por carrera, participar en evaluaciones, validar autoevaluaciones, acceder a reportes"],
                    ["Estudiante", "Alumnado regular de la instituci√≥n", "Acceder a competencias definidas, realizar autoevaluaciones, visualizar historial de evaluaciones, recibir retroalimentaci√≥n"]
                ]
            }
        })
        
        # Secci√≥n de Plan de Capacitaci√≥n
        secciones_adicionales.append({
            "title": "Plan de Capacitaci√≥n",
            "type": "list",
            "content": [
                "Capacitaci√≥n funcional: 6 horas distribuidas en 2 a 3 sesiones seg√∫n perfil",
                "Capacitaci√≥n t√©cnica (TI): 6 a 8 horas distribuidas en sesiones especializadas",
                "Acompa√±amiento supervisado: 4 semanas posteriores a la puesta en marcha",
                "Acceso permanente a materiales asincr√≥nicos",
                "Manuales de usuario diferenciados por perfil",
                "C√°psulas de video por funcionalidad clave (2 a 5 minutos)",
                "Documentaci√≥n t√©cnica estructurada",
                "Entorno de prueba (sandbox) disponible por 30 d√≠as",
                "Preguntas frecuentes (FAQ) actualizadas"
            ]
        })
        
        # Secci√≥n de Cronograma Detallado del Proyecto
        secciones_adicionales.append({
            "title": "Cronograma Detallado del Proyecto",
            "type": "table",
            "content": {
                "headers": ["Etapa", "Duraci√≥n", "Actividades Principales", "Entregables"],
                "rows": [
                    ["Inception", "1 mes", "Definici√≥n de requerimientos, an√°lisis preliminar, identificaci√≥n de actores", "Documento de especificaci√≥n detallado y roadmap del proyecto"],
                    ["Construction", "3 meses", "Desarrollo iterativo-incremental de m√≥dulos, integraciones cr√≠ticas", "Versiones funcionales incrementales de la plataforma"],
                    ["Transition", "1 mes", "Pruebas finales, transferencia tecnol√≥gica, capacitaci√≥n, despliegue", "Soluci√≥n operativa en ambiente del cliente"]
                ]
            }
        })
        
        # Secci√≥n de Inversi√≥n y Condiciones de Pago
        secciones_adicionales.append({
            "title": "Inversi√≥n y Condiciones de Pago",
            "type": "text",
            "content": f"Costo Total del Proyecto: ${costo_total:,} (pesos chilenos)\n\nDesglose de Costos:\n‚Ä¢ Desarrollo de plataforma web: ${int(costo_total * 0.71):,}\n‚Ä¢ Integraciones con sistemas institucionales: ${int(costo_total * 0.18):,}\n‚Ä¢ Capacitaci√≥n y transferencia tecnol√≥gica: ${int(costo_total * 0.07):,}\n‚Ä¢ Documentaci√≥n y soporte inicial: ${int(costo_total * 0.04):,}\n\nCondiciones de Pago:\n‚Ä¢ 30% al inicio del proyecto (firma de contrato)\n‚Ä¢ 40% al completar la Fase de Construction\n‚Ä¢ 30% al completar la Fase de Transition y aceptaci√≥n del sistema\n\nGarant√≠as Incluidas:\n‚Ä¢ Garant√≠a t√©cnica por 6 meses\n‚Ä¢ Soporte post-implementaci√≥n por 6 meses\n‚Ä¢ Actualizaciones de seguridad gratuitas\n‚Ä¢ Capacitaci√≥n completa del equipo t√©cnico"
        })
        
        return secciones_adicionales

    def _crear_prompt_con_historico(self, licitacion_dict: Dict[str, Any], empresa_nombre: str, empresa_descripcion: str) -> str:
        # Preparar ejemplos de ofertas hist√≥ricas
        ejemplos_ofertas = ""
        if self.ofertas_historicas:
            ejemplos_ofertas = "EJEMPLOS DE OFERTAS HIST√ìRICAS EXITOSAS:\n"
            for i, oferta in enumerate(self.ofertas_historicas[:3], 1):  # Usar m√°ximo 3 ejemplos
                ejemplos_ofertas += f"\n--- EJEMPLO {i} ---\n"
                ejemplos_ofertas += f"Archivo: {oferta.get('archivo_origen', 'N/A')}\n"
                for seccion, contenido in oferta.items():
                    if seccion != 'archivo_origen' and contenido:
                        ejemplos_ofertas += f"{seccion}: {str(contenido)[:200]}...\n"
                ejemplos_ofertas += "---\n"
        
        # Preparar ejemplos de licitaciones hist√≥ricas
        ejemplos_licitaciones = ""
        if self.licitaciones_historicas:
            ejemplos_licitaciones = "EJEMPLOS DE LICITACIONES HIST√ìRICAS:\n"
            for i, licitacion in enumerate(self.licitaciones_historicas[:2], 1):  # Usar m√°ximo 2 ejemplos
                ejemplos_licitaciones += f"\n--- LICITACI√ìN {i} ---\n"
                ejemplos_licitaciones += f"Archivo: {licitacion.get('archivo_origen', 'N/A')}\n"
                for seccion, contenido in licitacion.items():
                    if seccion != 'archivo_origen' and contenido:
                        ejemplos_licitaciones += f"{seccion}: {str(contenido)[:200]}...\n"
                ejemplos_licitaciones += "---\n"

        return (
            "Eres un experto en generaci√≥n de ofertas t√©cnicas para GUX Technologies y Proyectum. "
            "Debes generar una propuesta t√©cnica profesional usando las ofertas hist√≥ricas como base de conocimiento. "
            "\n\n"
            "EST√ÅNDARES INSTITUCIONALES A SEGUIR:\n"
            "1. ENFOQUE METODOL√ìGICO: Usar Disciplined Agile Delivery (DAD) con fases:\n"
            "   - Inception: Alineamiento estrat√©gico, definici√≥n de objetivos, comprensi√≥n del contexto\n"
            "   - Construction: Desarrollo iterativo, validaci√≥n temprana, retroalimentaci√≥n continua\n"
            "   - Transition: Despliegue, traspaso, adopci√≥n y cierre controlado\n"
            "   - Discovery continuo: Fase transversal para ajustes y nuevas necesidades\n"
            "\n"
            "2. ESTRUCTURA RECOMENDADA:\n"
            "   - Resumen Ejecutivo (sintetizar problema, soluci√≥n, metodolog√≠a, equipo, diferenciadores)\n"
            "   - Objetivos y Alcance del Servicio (conectar con desaf√≠os reales del cliente)\n"
            "   - Soluci√≥n Propuesta (adaptar seg√∫n tipo de servicio)\n"
            "   - Metodolog√≠a de Trabajo (DAD con mecanismos de control, gesti√≥n de riesgos, QA)\n"
            "   - Plan de Implementaci√≥n/Roadmap (hitos, tiempos, entregables)\n"
            "   - Organizaci√≥n del Proyecto (roles, liderazgo, coordinaci√≥n)\n"
            "   - Factores Claves para el √âxito (condiciones necesarias del cliente)\n"
            "   - Presentaci√≥n de la Empresa (antecedentes, experiencia, referencias)\n"
            "   - Equipo de Trabajo y CVs (perfiles coherentes con el desaf√≠o)\n"
            "   - Materia de Sostenibilidad (pol√≠ticas institucionales)\n"
            "   - Pol√≠tica de Diversidad e Inclusi√≥n (compromisos activos)\n"
            "\n"
            "3. PRINCIPIOS CLAVE:\n"
            "   - Generar valor real para el cliente, no solo cumplir bases formales\n"
            "   - Posicionarse como partner estrat√©gico\n"
            "   - Usar lenguaje claro, directo y profesional (tercera persona)\n"
            "   - Personalizar usando el nombre real de la organizaci√≥n cliente\n"
            "   - Evitar copiar y pegar sin contexto\n"
            "   - Enfoque en resultados tangibles y propuesta de valor concreta\n"
            "\n"
            "4. DIFERENCIADORES:\n"
            "   - Rigor y alineaci√≥n con desaf√≠os reales\n"
            "   - Enfoque metodol√≥gico √°gil y flexible\n"
            "   - Orientaci√≥n a resultados\n"
            "   - Integraci√≥n de sostenibilidad, innovaci√≥n y experiencia\n"
            "\n"
            f"{ejemplos_ofertas}\n"
            f"{ejemplos_licitaciones}\n"
            f"LICITACI√ìN A RESPONDER:\n{json.dumps(licitacion_dict, ensure_ascii=False, indent=2)}\n"
            f"EMPRESA: {empresa_nombre}\n"
            f"DESCRIPCI√ìN: {empresa_descripcion}\n"
            "\n"
            "INSTRUCCIONES ESPEC√çFICAS:\n"
            "1. ANALIZA las ofertas hist√≥ricas para entender el estilo, estructura y contenido exitoso\n"
            "2. ADAPTA el contenido de las ofertas hist√≥ricas al contexto de la nueva licitaci√≥n\n"
            "3. GENERA un JSON que incluya TODAS las secciones de la licitaci√≥n de entrada\n"
            "4. USA el mismo formato y estructura que las ofertas hist√≥ricas exitosas\n"
            "5. PERSONALIZA el contenido para la empresa y licitaci√≥n espec√≠fica\n"
            "6. ASEG√öRATE de que cada secci√≥n tenga contenido sustancial y profesional\n"
            "7. SIGUE los est√°ndares de GUX Technologies en todo el contenido\n"
            "\n"
            "IMPORTANTE: El JSON resultante debe ser COMPLETO y LISTO para generar el documento final. "
            "Cada secci√≥n debe tener contenido detallado y profesional, no solo t√≠tulos vac√≠os."
        )

    def _crear_prompt_multiple_licitaciones(self, licitaciones: List[Dict[str, Any]], empresa_nombre: str, empresa_descripcion: str) -> str:
        # Preparar ejemplos de ofertas hist√≥ricas
        ejemplos_ofertas = ""
        if self.ofertas_historicas:
            ejemplos_ofertas = "EJEMPLOS DE OFERTAS HIST√ìRICAS EXITOSAS:\n"
            for i, oferta in enumerate(self.ofertas_historicas[:3], 1):
                ejemplos_ofertas += f"\n--- EJEMPLO {i} ---\n"
                ejemplos_ofertas += f"Archivo: {oferta.get('archivo_origen', 'N/A')}\n"
                for seccion, contenido in oferta.items():
                    if seccion != 'archivo_origen' and contenido:
                        ejemplos_ofertas += f"{seccion}: {str(contenido)[:200]}...\n"
                ejemplos_ofertas += "---\n"
        
        # Preparar informaci√≥n de todas las licitaciones
        info_licitaciones = "LICITACIONES A ANALIZAR:\n"
        for i, licitacion in enumerate(licitaciones, 1):
            info_licitaciones += f"\n--- LICITACI√ìN {i}: {licitacion['archivo']} ---\n"
            for seccion, contenido in licitacion['datos'].items():
                if contenido:
                    info_licitaciones += f"{seccion}: {str(contenido)[:300]}...\n"
            info_licitaciones += "---\n"

        return (
            "Eres un experto en generaci√≥n de ofertas t√©cnicas para GUX Technologies y Proyectum. "
            "Tu tarea es analizar M√öLTIPLES licitaciones y generar la MEJOR oferta t√©cnica combinando "
            "la informaci√≥n m√°s relevante de cada una, usando las ofertas hist√≥ricas como base de conocimiento. "
            "\n\n"
            "EST√ÅNDARES INSTITUCIONALES A SEGUIR:\n"
            "1. ENFOQUE METODOL√ìGICO: Usar Disciplined Agile Delivery (DAD) con fases:\n"
            "   - Inception: Alineamiento estrat√©gico, definici√≥n de objetivos, comprensi√≥n del contexto\n"
            "   - Construction: Desarrollo iterativo, validaci√≥n temprana, retroalimentaci√≥n continua\n"
            "   - Transition: Despliegue, traspaso, adopci√≥n y cierre controlado\n"
            "   - Discovery continuo: Fase transversal para ajustes y nuevas necesidades\n"
            "\n"
            "2. ESTRUCTURA RECOMENDADA:\n"
            "   - Resumen Ejecutivo (sintetizar problema, soluci√≥n, metodolog√≠a, equipo, diferenciadores)\n"
            "   - Objetivos y Alcance del Servicio (conectar con desaf√≠os reales del cliente)\n"
            "   - Soluci√≥n Propuesta (adaptar seg√∫n tipo de servicio)\n"
            "   - Metodolog√≠a de Trabajo (DAD con mecanismos de control, gesti√≥n de riesgos, QA)\n"
            "   - Plan de Implementaci√≥n/Roadmap (hitos, tiempos, entregables)\n"
            "   - Organizaci√≥n del Proyecto (roles, liderazgo, coordinaci√≥n)\n"
            "   - Factores Claves para el √âxito (condiciones necesarias del cliente)\n"
            "   - Presentaci√≥n de la Empresa (antecedentes, experiencia, referencias)\n"
            "   - Equipo de Trabajo y CVs (perfiles coherentes con el desaf√≠o)\n"
            "   - Materia de Sostenibilidad (pol√≠ticas institucionales)\n"
            "   - Pol√≠tica de Diversidad e Inclusi√≥n (compromisos activos)\n"
            "\n"
            "3. PRINCIPIOS CLAVE:\n"
            "   - Generar valor real para el cliente, no solo cumplir bases formales\n"
            "   - Posicionarse como partner estrat√©gico\n"
            "   - Usar lenguaje claro, directo y profesional (tercera persona)\n"
            "   - Personalizar usando el nombre real de la organizaci√≥n cliente\n"
            "   - Evitar copiar y pegar sin contexto\n"
            "   - Enfoque en resultados tangibles y propuesta de valor concreta\n"
            "\n"
            "4. DIFERENCIADORES:\n"
            "   - Rigor y alineaci√≥n con desaf√≠os reales\n"
            "   - Enfoque metodol√≥gico √°gil y flexible\n"
            "   - Orientaci√≥n a resultados\n"
            "   - Integraci√≥n de sostenibilidad, innovaci√≥n y experiencia\n"
            "\n"
            f"{ejemplos_ofertas}\n"
            f"{info_licitaciones}\n"
            f"EMPRESA: {empresa_nombre}\n"
            f"DESCRIPCI√ìN: {empresa_descripcion}\n"
            "\n"
            "INSTRUCCIONES ESPEC√çFICAS PARA M√öLTIPLES LICITACIONES:\n"
            "1. ANALIZA cada licitaci√≥n para identificar:\n"
            "   - Requisitos t√©cnicos espec√≠ficos\n"
            "   - Alcances y objetivos\n"
            "   - Plazos y cronogramas\n"
            "   - Criterios de evaluaci√≥n\n"
            "   - Especificaciones t√©cnicas\n"
            "\n"
            "2. COMBINA la informaci√≥n m√°s relevante de todas las licitaciones:\n"
            "   - Toma los requisitos m√°s exigentes\n"
            "   - Integra los alcances complementarios\n"
            "   - Considera los plazos m√°s realistas\n"
            "   - Incluye todos los criterios de evaluaci√≥n\n"
            "\n"
            "3. GENERA una oferta t√©cnica COMPLETA que:\n"
            "   - Responda a TODOS los requisitos identificados\n"
            "   - Use el estilo y estructura de las ofertas hist√≥ricas exitosas\n"
            "   - Sea coherente y profesional\n"
            "   - Maximice las posibilidades de √©xito\n"
            "\n"
            "4. ASEG√öRATE de que la oferta:\n"
            "   - Sea m√°s completa que cualquier licitaci√≥n individual\n"
            "   - Incluya todos los elementos necesarios\n"
            "   - Siga los est√°ndares de GUX Technologies\n"
            "   - Est√© lista para generar el documento final\n"
            "\n"
            "IMPORTANTE: El JSON resultante debe ser la MEJOR oferta posible, "
            "combinando lo mejor de todas las licitaciones analizadas."
        )

    def _obtener_estructura_combinada(self, licitaciones: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Combina las estructuras de todas las licitaciones en una estructura unificada"""
        estructura_combinada = {}
        
        for licitacion in licitaciones:
            for seccion, contenido in licitacion['datos'].items():
                if seccion not in estructura_combinada:
                    estructura_combinada[seccion] = ""
        
        return estructura_combinada

    def _generar_json_con_ia(self, prompt: str, estructura_referencia: Dict[str, Any]) -> Dict[str, Any]:
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres un experto en generaci√≥n de propuestas t√©cnicas para GUX Technologies y Proyectum. Tu tarea es crear ofertas t√©cnicas profesionales bas√°ndote en ofertas hist√≥ricas exitosas y adapt√°ndolas al contexto espec√≠fico de cada licitaci√≥n. SIEMPRE debes generar contenido sustancial y profesional para cada secci√≥n. NUNCA dejes secciones vac√≠as. Siempre devuelves JSON v√°lido y completo con contenido real."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=Config.MAX_TOKENS,
                temperature=Config.TEMPERATURE
            )
            contenido = response.choices[0].message.content
            # Buscar el primer bloque JSON en la respuesta
            json_str = self._extraer_json(contenido)
            resultado = json.loads(json_str)
            
            # Verificar que el resultado tenga contenido
            if not self._verificar_contenido(resultado):
                print("‚ö†Ô∏è  El resultado est√° vac√≠o, generando contenido de respaldo...")
                resultado = self._generar_contenido_respaldo(estructura_referencia)
            
            return resultado
        except Exception as e:
            print(f"Error en generaci√≥n con IA: {e}")
            # Fallback: generar contenido de respaldo
            return self._generar_contenido_respaldo(estructura_referencia)

    def _verificar_contenido(self, resultado: Dict[str, Any]) -> bool:
        """Verifica que el resultado tenga contenido sustancial"""
        if not resultado:
            return False
        
        contenido_total = 0
        secciones_con_contenido = 0
        
        for seccion, contenido in resultado.items():
            if contenido and str(contenido).strip():
                contenido_total += len(str(contenido))
                secciones_con_contenido += 1
        
        # Debe tener al menos 3 secciones con contenido y al menos 1000 caracteres totales
        return secciones_con_contenido >= 3 and contenido_total >= 1000

    def _generar_contenido_respaldo(self, estructura_referencia: Dict[str, Any]) -> Dict[str, Any]:
        """Genera contenido de respaldo cuando la IA falla o devuelve contenido vac√≠o"""
        contenido_respaldo = {}
        
        for seccion in estructura_referencia.keys():
            contenido_respaldo[seccion] = self._generar_contenido_por_seccion(seccion)
        
        return contenido_respaldo

    def _generar_contenido_por_seccion(self, seccion: str) -> str:
        """Genera contenido espec√≠fico para cada tipo de secci√≥n"""
        contenido_base = {
            "INTRODUCCI√ìN": "GUX Technologies presenta esta propuesta t√©cnica para responder a los requerimientos especificados en las bases de licitaci√≥n. Nuestra empresa cuenta con amplia experiencia en el desarrollo e implementaci√≥n de soluciones tecnol√≥gicas innovadoras, con un equipo de profesionales altamente calificados y metodolog√≠as probadas que garantizan la entrega de resultados de excelencia. Esta propuesta se fundamenta en un enfoque metodol√≥gico basado en Disciplined Agile Delivery (DAD), que permite la adaptabilidad a los cambios y la entrega de valor continuo al cliente.",
            
            "RESUMEN EJECUTIVO": "La presente propuesta t√©cnica de GUX Technologies responde integralmente a los requerimientos establecidos en las bases de licitaci√≥n. Nuestra soluci√≥n se fundamenta en metodolog√≠as √°giles probadas, tecnolog√≠as de vanguardia y un equipo de profesionales con amplia experiencia en proyectos similares. La propuesta incluye un enfoque metodol√≥gico basado en Disciplined Agile Delivery (DAD), garantizando la entrega de valor continuo y la adaptabilidad a los cambios del proyecto. El equipo asignado cuenta con m√°s de 20 a√±os de experiencia en desarrollo de productos digitales, con presencia en Latinoam√©rica y Europa, y especializaci√≥n en soluciones para instituciones educativas y del sector p√∫blico.",
            
            "ALCANCE DEL SERVICIO": "El alcance del servicio incluye el an√°lisis detallado de requerimientos, dise√±o de arquitectura t√©cnica, desarrollo e implementaci√≥n de la soluci√≥n, pruebas integrales, capacitaci√≥n del personal y soporte post-implementaci√≥n. GUX Technologies se compromete a entregar una soluci√≥n completa que cumpla con todos los est√°ndares de calidad y funcionalidad especificados. El proyecto contempla el desarrollo de una plataforma web moderna, segura e inclusiva, accesible desde distintos dispositivos y escalable, con funcionalidades de gesti√≥n de usuarios, reportes anal√≠ticos, integraci√≥n con sistemas existentes y mecanismos de seguridad robustos.",
            
            "METODOLOG√çA DE TRABAJO": "Nuestra metodolog√≠a se basa en Disciplined Agile Delivery (DAD) con las siguientes fases: 1) Inception (1 mes): Alineamiento estrat√©gico, definici√≥n de objetivos, consolidaci√≥n del equipo multidisciplinario, consolidaci√≥n de la arquitectura t√©cnica y confirmaci√≥n del backlog inicial; 2) Construction (3 meses): Desarrollo iterativo con entregables incrementales, iteraciones cortas de 1-2 semanas con demostraciones frecuentes, implementaci√≥n progresiva de integraciones y pruebas t√©cnicas continuas; 3) Transition (1 mes): Pruebas finales, transferencia tecnol√≥gica, capacitaci√≥n de personal t√©cnico, despliegue en producci√≥n y activaci√≥n del plan de soporte. Cada fase incluye mecanismos de control de calidad, gesti√≥n de riesgos y comunicaci√≥n continua con el cliente.",
            
            "EQUIPO DE TRABAJO": "El equipo asignado incluye un Project Manager con m√°s de 10 a√±os de experiencia en gesti√≥n de proyectos tecnol√≥gicos, un Tech Lead/Arquitecto especializado en arquitecturas de sistemas educativos, desarrolladores full-stack con experiencia en React, TypeScript, Django y Python, especialistas en UX/UI con enfoque en dise√±o centrado en usuario y accesibilidad, profesionales de QA con experiencia en testing automatizado y casos de uso educativos, y un DevSecOps especializado en Docker, Kubernetes y gesti√≥n de entornos en la nube. Todos los integrantes cuentan con certificaciones relevantes y experiencia en proyectos similares.",
            
            "PLAZOS": "El proyecto se ejecutar√° en un plazo de 5 meses, distribuidos en fases incrementales que permitan la validaci√≥n temprana y la entrega de valor continuo. Los hitos principales incluyen: Fase 1 - Inception (1 mes): Documento de especificaci√≥n detallado y roadmap del proyecto; Fase 2 - Construction (3 meses): Versiones funcionales incrementales de la plataforma; Fase 3 - Transition (1 mes): Soluci√≥n operativa en ambiente del cliente. Cada fase incluye entregables funcionales y documentaci√≥n completa, con revisiones y validaciones continuas con el cliente.",
            
            "ESPECIFICACIONES T√âCNICAS": "La soluci√≥n se desarrollar√° utilizando tecnolog√≠as modernas y escalables, incluyendo Django sobre Python para el backend, React con TypeScript para el frontend, PostgreSQL y MongoDB para bases de datos, contenedores Docker con orquestaci√≥n Kubernetes, y arquitecturas en la nube. Se implementar√°n est√°ndares de seguridad robustos, integraci√≥n con sistemas existentes mediante APIs RESTful, autenticaci√≥n unificada, mecanismos de monitoreo y respaldo, y funcionalidades de accesibilidad y usabilidad. La infraestructura ser√° escalable, segura y de alta disponibilidad.",
            
            "GARANT√çAS Y SOPORTE": "GUX Technologies ofrece garant√≠a t√©cnica por 6 meses post-implementaci√≥n, incluyendo correcci√≥n sin costo de errores funcionales, bugs o defectos atribuibles al c√≥digo fuente, correcci√≥n de errores de configuraci√≥n en los entornos implementados, revisi√≥n y ajuste de integraciones con sistemas institucionales, y actualizaci√≥n de la documentaci√≥n t√©cnica. El soporte incluye resoluci√≥n de consultas operativas y funcionales para usuarios autorizados, acompa√±amiento en el monitoreo de integraciones y flujos cr√≠ticos, aplicaci√≥n de ajustes menores de configuraci√≥n, y participaci√≥n en reuniones t√©cnicas mensuales. Clasificaci√≥n de incidencias: Nivel 1 (Cr√≠tico): 2 horas h√°biles de respuesta; Nivel 2 (Medio): 8 horas h√°biles de respuesta; Nivel 3 (Leve): 24 horas h√°biles de respuesta.",
            
            "EXPERIENCIA Y REFERENCIAS": "GUX Technologies cuenta con m√°s de 20 a√±os de experiencia en desarrollo de soluciones tecnol√≥gicas, con presencia en Latinoam√©rica y Europa. Hemos ejecutado exitosamente proyectos similares para instituciones p√∫blicas y privadas, incluyendo: Pontificia Universidad Cat√≥lica de Chile (Plataforma de Evaluaci√≥n de Madurez en Gesti√≥n TI), Universidad Santo Tom√°s (Plataforma administrativa con hiperautomatizaci√≥n), Universidad Alberto Hurtado (Plataforma administrativa con hiperautomatizaci√≥n), Universidad de Las Am√©ricas (Plataforma para apoyo a personas con discapacidad cognitiva), y Bomberos de Chile (Apoyo integral a la Academia Nacional de Bomberos). El equipo cuenta con especialistas en tecnolog√≠as educativas (EdTech), desarrolladores full-stack, arquitectos de software, y especialistas en experiencia de usuario.",
            
            "FACTORES CLAVE PARA EL √âXITO": "La coordinaci√≥n y ejecuci√≥n de entrevistas y focus groups con participaci√≥n activa del cliente, disponibilidad de APIs y sistemas existentes dentro de los plazos definidos, documentaci√≥n clara de APIs, ambientes de prueba y autenticaci√≥n segura, ambientes estables para QA y producci√≥n desde etapas tempranas, dedicaci√≥n de colaboradores clave del cliente para validaci√≥n y ejecuci√≥n, gesti√≥n de licencias de software, hardware especializado o insumos espec√≠ficos por parte del cliente, y cumplimiento normativo y alineaci√≥n con regulaciones vigentes. Estos factores son fundamentales para garantizar el √©xito del proyecto y la satisfacci√≥n del cliente.",
            
            "INVERSI√ìN Y CONDICIONES DE PAGO": "El costo total del proyecto es de $45.000.000 (pesos chilenos), con el siguiente desglose: Desarrollo de plataforma web ($32.000.000), integraciones con sistemas institucionales ($8.000.000), capacitaci√≥n y transferencia tecnol√≥gica ($3.000.000), y documentaci√≥n y soporte inicial ($2.000.000). Las condiciones de pago son: 30% al inicio del proyecto (firma de contrato), 40% al completar la Fase de Construction, y 30% al completar la Fase de Transition y aceptaci√≥n del sistema. Las garant√≠as incluidas son: garant√≠a t√©cnica por 6 meses, soporte post-implementaci√≥n por 6 meses, actualizaciones de seguridad gratuitas, y capacitaci√≥n completa del equipo t√©cnico."
        }
        
        # Buscar contenido espec√≠fico o usar contenido gen√©rico
        for clave, contenido in contenido_base.items():
            if clave.lower() in seccion.lower() or seccion.lower() in clave.lower():
                return contenido
        
        # Si no encuentra coincidencia espec√≠fica, usar contenido gen√©rico m√°s detallado
        return f"GUX Technologies presenta su propuesta t√©cnica para la secci√≥n '{seccion}'. Nuestra empresa cuenta con amplia experiencia en el desarrollo de soluciones tecnol√≥gicas innovadoras y se compromete a entregar resultados de excelencia que cumplan con todos los requerimientos especificados. El enfoque metodol√≥gico incluye mejores pr√°cticas de la industria, tecnolog√≠as de vanguardia como Django, React, Python y TypeScript, y un equipo de profesionales altamente calificados con m√°s de 20 a√±os de experiencia en el sector. La propuesta contempla un desarrollo iterativo basado en Disciplined Agile Delivery (DAD), con fases bien definidas que incluyen Inception (1 mes), Construction (3 meses) y Transition (1 mes), garantizando la entrega de valor continuo y la adaptabilidad a los cambios del proyecto."

    def _crear_prompt_estructura_json(self, licitaciones: List[Dict[str, Any]], empresa_nombre: str, empresa_descripcion: str, nombre_proyecto: str, cliente: str, fecha: str, costo_total: int, plazo: str) -> str:
        """Crea un prompt espec√≠fico para generar la estructura JSON requerida"""
        
        # Preparar informaci√≥n de las licitaciones
        info_licitaciones = "LICITACIONES A ANALIZAR:\n"
        for i, licitacion in enumerate(licitaciones, 1):
            info_licitaciones += f"\n--- LICITACI√ìN {i}: {licitacion['archivo']} ---\n"
            for seccion, contenido in licitacion['datos'].items():
                if contenido:
                    info_licitaciones += f"{seccion}: {str(contenido)[:300]}...\n"
            info_licitaciones += "---\n"

        return (
            "Eres un experto en generaci√≥n de ofertas t√©cnicas para GUX Technologies. "
            "Debes generar una oferta t√©cnica en formato JSON EXACTO con la siguiente estructura:\n\n"
            "{\n"
            '   "projectInfo": {\n'
            '      "name": "Nombre del Proyecto",\n'
            '      "client": "Nombre del Cliente",\n'
            '      "date": "Fecha",\n'
            '      "totalCost": 45000000,\n'
            '      "timeline": "5 meses"\n'
            "   },\n"
            '   "sections": [\n'
            "      {\n"
            '         "id": "1",\n'
            '         "title": "Resumen Ejecutivo",\n'
            '         "type": "text",\n'
            '         "content": "Contenido detallado...",\n'
            '         "pageBreak": true\n'
            "      },\n"
            "      {\n"
            '         "id": "2",\n'
            '         "title": "Alcance del Servicio",\n'
            '         "type": "list",\n'
            '         "content": [\n'
            '            "Elemento 1",\n'
            '            "Elemento 2"\n'
            "         ]\n"
            "      },\n"
            "      {\n"
            '         "id": "3",\n'
            '         "title": "Tipos de Usuarios y Permisos",\n'
            '         "type": "table",\n'
            '         "content": {\n'
            '            "headers": ["Columna 1", "Columna 2"],\n'
            '            "rows": [\n'
            '               ["Dato 1", "Dato 2"]\n'
            "            ]\n"
            "         }\n"
            "      }\n"
            "   ],\n"
            '   "styling": {\n'
            '      "primaryColor": "#2563eb",\n'
            '      "secondaryColor": "#1e40af",\n'
            '      "fontFamily": "Arial, sans-serif"\n'
            "   }\n"
            "}\n\n"
            "TIPOS DE CONTENIDO:\n"
            "- 'text': Para p√°rrafos largos de texto (m√≠nimo 500 caracteres por secci√≥n)\n"
            "- 'list': Para listas de elementos (array de strings, m√≠nimo 5 elementos)\n"
            "- 'table': Para tablas con headers y rows (m√≠nimo 3 filas)\n\n"
            "SECCIONES OBLIGATORIAS CON CONTENIDO DETALLADO:\n"
            "1. Resumen Ejecutivo (text, pageBreak: true) - M√≠nimo 800 caracteres\n"
            "2. Alcance del Servicio (list) - M√≠nimo 7 elementos detallados\n"
            "3. Funcionalidades Clave del Sistema (text, pageBreak: true) - M√≠nimo 1000 caracteres\n"
            "4. Tipos de Usuarios y Permisos (table) - M√≠nimo 3 filas con 3 columnas\n"
            "5. Infraestructura Tecnol√≥gica (text, pageBreak: true) - M√≠nimo 800 caracteres\n"
            "6. Equipo de Trabajo Asignado (table) - M√≠nimo 6 filas con roles detallados\n"
            "7. Metodolog√≠a de Implementaci√≥n (text, pageBreak: true) - M√≠nimo 1000 caracteres\n"
            "8. Garant√≠as y Soporte Post-implementaci√≥n (text) - M√≠nimo 800 caracteres\n"
            "9. Plan de Capacitaci√≥n (list) - M√≠nimo 8 elementos\n"
            "10. Experiencia y Referencias (text, pageBreak: true) - M√≠nimo 800 caracteres\n"
            "11. Factores Clave para el √âxito (list) - M√≠nimo 6 elementos\n"
            "12. Cronograma Detallado del Proyecto (table) - M√≠nimo 3 filas con etapas\n"
            "13. Inversi√≥n y Condiciones de Pago (text) - M√≠nimo 600 caracteres\n\n"
            "REQUISITOS DE CALIDAD:\n"
            "- Cada secci√≥n debe tener contenido sustancial y profesional\n"
            "- Usar lenguaje t√©cnico apropiado pero comprensible\n"
            "- Incluir detalles espec√≠ficos y ejemplos concretos\n"
            "- Personalizar el contenido para el cliente espec√≠fico\n"
            "- Seguir los est√°ndares de GUX Technologies\n"
            "- Generar contenido original, no copiado\n\n"
            f"INFORMACI√ìN DEL PROYECTO:\n"
            f"- Nombre: {nombre_proyecto}\n"
            f"- Cliente: {cliente}\n"
            f"- Fecha: {fecha}\n"
            f"- Costo Total: ${costo_total:,}\n"
            f"- Plazo: {plazo}\n"
            f"- Empresa: {empresa_nombre}\n"
            f"- Descripci√≥n: {empresa_descripcion}\n\n"
            f"{info_licitaciones}\n"
            "INSTRUCCIONES ESPEC√çFICAS:\n"
            "1. Analiza DETALLADAMENTE las licitaciones para entender todos los requerimientos\n"
            "2. Genera contenido PROFESIONAL, DETALLADO y EXTENSO para cada secci√≥n\n"
            "3. Usa el formato JSON exacto especificado\n"
            "4. Incluye TODAS las secciones obligatorias con contenido sustancial\n"
            "5. Personaliza el contenido para el cliente espec√≠fico mencionado\n"
            "6. Aseg√∫rate de que el JSON sea v√°lido y completo\n"
            "7. Usa pageBreak: true para secciones importantes\n"
            "8. Genera contenido ORIGINAL y PROFESIONAL, no solo t√≠tulos vac√≠os\n"
            "9. Cada secci√≥n debe tener al menos el m√≠nimo de caracteres especificado\n"
            "10. Incluye detalles t√©cnicos, metodol√≥gicos y de implementaci√≥n\n\n"
            "IMPORTANTE: Devuelve SOLO el JSON, sin texto adicional antes o despu√©s. "
            "El contenido debe ser PROFESIONAL, DETALLADO y COMPLETO."
        )

    def _generar_json_estructurado_con_ia(self, prompt: str, nombre_proyecto: str = "Proyecto", cliente: str = "Cliente", fecha: str = "2025", costo_total: int = 45000000, plazo: str = "5 meses", empresa_nombre: str = "GUX Technologies") -> Dict[str, Any]:
        """Genera JSON estructurado usando IA con el formato espec√≠fico requerido"""
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres un experto en generaci√≥n de ofertas t√©cnicas para GUX Technologies. Tu tarea es crear ofertas t√©cnicas en formato JSON estructurado con projectInfo, sections y styling. SIEMPRE devuelves JSON v√°lido y completo con contenido real y profesional. NUNCA dejes secciones vac√≠as."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=Config.MAX_TOKENS,
                temperature=Config.TEMPERATURE
            )
            contenido = response.choices[0].message.content
            json_str = self._extraer_json(contenido)
            resultado = json.loads(json_str)
            
            # Verificar que tenga la estructura correcta
            if not self._verificar_estructura_json(resultado):
                print("‚ö†Ô∏è  La estructura JSON no es correcta, generando estructura de respaldo...")
                print(f"   - Secciones encontradas: {len(resultado.get('sections', []))}")
                print(f"   - projectInfo presente: {'projectInfo' in resultado}")
                print(f"   - styling presente: {'styling' in resultado}")
                
                # Intentar extraer informaci√≥n del resultado parcial
                project_info = resultado.get("projectInfo", {})
                return self._generar_estructura_fallback(
                    project_info.get("name", nombre_proyecto),
                    project_info.get("client", cliente),
                    project_info.get("date", fecha),
                    project_info.get("totalCost", costo_total),
                    project_info.get("timeline", plazo),
                    empresa_nombre
                )
            
            print("‚úÖ Estructura JSON v√°lida generada correctamente")
            return resultado
        except Exception as e:
            print(f"Error en generaci√≥n de JSON estructurado: {e}")
            print("üîÑ Generando estructura de respaldo debido al error...")
            # Generar estructura de respaldo en caso de error
            return self._generar_estructura_fallback(
                nombre_proyecto,
                cliente,
                fecha,
                costo_total,
                plazo,
                empresa_nombre
            )

    def _verificar_estructura_json(self, resultado: Dict[str, Any]) -> bool:
        """Verifica que el JSON tenga la estructura correcta y contenido suficiente"""
        if not resultado:
            return False
        
        # Verificar que tenga projectInfo
        if "projectInfo" not in resultado:
            return False
        
        # Verificar que tenga sections
        if "sections" not in resultado or not isinstance(resultado["sections"], list):
            return False
        
        # Verificar que tenga styling
        if "styling" not in resultado:
            return False
        
        # Verificar que tenga al menos 5 secciones (m√°s flexible)
        if len(resultado["sections"]) < 5:
            return False
        
        # Verificar que cada secci√≥n tenga id, title, type y content
        contenido_total = 0
        secciones_con_contenido = 0
        
        for seccion in resultado["sections"]:
            if not all(key in seccion for key in ["id", "title", "type", "content"]):
                return False
            
            # Verificar contenido m√≠nimo (m√°s flexible)
            contenido = seccion["content"]
            if contenido:
                if seccion["type"] == "text":
                    contenido_str = str(contenido)
                    if len(contenido_str) < 100:  # M√≠nimo 100 caracteres para texto (m√°s flexible)
                        continue  # No fallar, solo no contar esta secci√≥n
                    contenido_total += len(contenido_str)
                    secciones_con_contenido += 1
                elif seccion["type"] == "list":
                    if isinstance(contenido, list) and len(contenido) >= 2:  # M√≠nimo 2 elementos (m√°s flexible)
                        contenido_total += sum(len(str(item)) for item in contenido)
                        secciones_con_contenido += 1
                    else:
                        continue  # No fallar, solo no contar esta secci√≥n
                elif seccion["type"] == "table":
                    if isinstance(contenido, dict) and "headers" in contenido and "rows" in contenido:
                        if len(contenido["rows"]) >= 1:  # M√≠nimo 1 fila (m√°s flexible)
                            contenido_total += 50  # Valor m√≠nimo para tablas
                            secciones_con_contenido += 1
                        else:
                            continue  # No fallar, solo no contar esta secci√≥n
                    else:
                        continue  # No fallar, solo no contar esta secci√≥n
        
        # Debe tener al menos 3 secciones con contenido y al menos 2000 caracteres totales (m√°s flexible)
        return secciones_con_contenido >= 3 and contenido_total >= 2000

    def _generar_estructura_fallback(self, nombre_proyecto: str, cliente: str, fecha: str, costo_total: int, plazo: str, empresa_nombre: str) -> Dict[str, Any]:
        """Genera una estructura JSON de respaldo con el formato requerido"""
        return {
            "projectInfo": {
                "name": nombre_proyecto,
                "client": cliente,
                "date": fecha,
                "totalCost": costo_total,
                "timeline": plazo
            },
            "sections": [
                {
                    "id": "1",
                    "title": "Resumen Ejecutivo",
                    "type": "text",
                    "content": f"La presente propuesta responde a la necesidad de {cliente} de contar con un servicio especializado para el desarrollo e implementaci√≥n de un sistema tecnol√≥gico integral, que permita optimizar sus procesos de manera sistem√°tica, integrada y basada en datos.\n\nEsta soluci√≥n tiene por objetivo fortalecer los procesos institucionales, entregando herramientas tecnol√≥gicas que contribuyan a la mejora continua de la calidad operacional. La propuesta contempla el dise√±o e implementaci√≥n de una plataforma web alojada en la nube, desarrollada bajo un enfoque modular que incluye funcionalidades clave como: gesti√≥n de usuarios y permisos, evaluaci√≥n y seguimiento de procesos, visualizaci√≥n de indicadores clave a trav√©s de un panel de control, e integraci√≥n bidireccional con sistemas existentes.",
                    "pageBreak": True
                },
                {
                    "id": "2",
                    "title": "Alcance del Servicio",
                    "type": "list",
                    "content": [
                        "Desarrollar una plataforma web alojada en la nube, moderna, segura e inclusiva, accesible desde distintos dispositivos y escalable",
                        "Dise√±ar e implementar mecanismos de gesti√≥n y reporte de procesos, aplicables a distintos niveles organizacionales",
                        "Incorporar un sistema flexible de creaci√≥n, gesti√≥n y aplicaci√≥n de configuraciones, ajustado a los criterios institucionales",
                        "Proporcionar funcionalidades de acceso personalizado para distintos perfiles de usuarios",
                        "Facilitar la gesti√≥n mediante una interfaz intuitiva que fomente la eficiencia operacional",
                        "Generar reportes anal√≠ticos y visualizaciones de indicadores clave de desempe√±o",
                        "Permitir la incorporaci√≥n de ajustes funcionales y mejoras en el sistema sin interrupciones de servicio"
                    ]
                },
                {
                    "id": "3",
                    "title": "Funcionalidades Clave del Sistema",
                    "type": "text",
                    "content": "El sistema considera los siguientes m√≥dulos principales:\n\n‚Ä¢ Gestor de Usuarios: M√≥dulo en el cual el usuario Administrador podr√° crear, editar, organizar y actualizar perfiles de usuarios que operan en la instituci√≥n. Estos perfiles estar√°n alineados al modelo organizacional del cliente y podr√°n configurarse seg√∫n niveles jer√°rquicos, departamentos, sedes y campus.\n\n‚Ä¢ Gestor de Configuraciones: M√≥dulo en el cual el usuario Administrador podr√° crear, agregar, modificar y/o eliminar las distintas configuraciones del sistema para cada funcionalidad, en cada uno de sus niveles operacionales.\n\n‚Ä¢ M√≥dulo de Gesti√≥n y Seguimiento: M√≥dulo en el cual tanto los usuarios finales como los supervisores podr√°n realizar procesos de gesti√≥n y seguimiento.\n\n‚Ä¢ Panel de Control y Reporter√≠a Avanzada: M√≥dulo central de gesti√≥n estrat√©gica donde el Administrador podr√° monitorear el uso del sistema, analizar indicadores clave de desempe√±o y generar reportes personalizados.",
                    "pageBreak": True
                },
                {
                    "id": "4",
                    "title": "Tipos de Usuarios y Permisos",
                    "type": "table",
                    "content": {
                        "headers": ["Perfil de Usuario", "Descripci√≥n", "Permisos Principales"],
                        "rows": [
                            ["Administrador", "Equipo de gesti√≥n institucional, direcci√≥n o soporte TI", "Crear/editar usuarios, gestionar configuraciones, configurar calendarios, supervisar uso del sistema"],
                            ["Supervisor", "Personal con responsabilidad sobre coordinaci√≥n de procesos", "Visualizar resultados por √°rea, participar en evaluaciones, validar procesos, acceder a reportes"],
                            ["Usuario Final", "Personal regular de la instituci√≥n", "Acceder a funcionalidades definidas, realizar gestiones, visualizar historial, recibir retroalimentaci√≥n"]
                        ]
                    }
                },
                {
                    "id": "5",
                    "title": "Infraestructura Tecnol√≥gica",
                    "type": "text",
                    "content": "La soluci√≥n propuesta contempla una infraestructura tecnol√≥gica moderna, escalable y segura:\n\n‚Ä¢ Backend: Framework Django sobre Python, permitiendo una arquitectura robusta, modular y f√°cilmente integrable con sistemas existentes.\n\n‚Ä¢ Frontend: Desarrollo basado en React con TypeScript, utilizado para la construcci√≥n de interfaces de usuario din√°micas, interactivas y reutilizables.\n\n‚Ä¢ Base de Datos: Uso combinado de PostgreSQL (para datos estructurados relacionales) y MongoDB (para datos semiestructurados).\n\n‚Ä¢ Infraestructura: Implementaci√≥n sobre servidores Linux utilizando contenedores con Docker y orquestaci√≥n a trav√©s de Kubernetes.\n\n‚Ä¢ Integraciones: API RESTful para integraci√≥n bidireccional con sistemas existentes, autenticaci√≥n unificada con Microsoft EntraID o sistemas similares.",
                    "pageBreak": True
                },
                {
                    "id": "6",
                    "title": "Equipo de Trabajo Asignado",
                    "type": "table",
                    "content": {
                        "headers": ["Rol", "Responsabilidades Principales", "Experiencia Requerida"],
                        "rows": [
                            ["Project Manager", "Planificaci√≥n, coordinaci√≥n y control del proyecto. Interacci√≥n directa con el equipo del cliente", "M√°s de 10 a√±os en gesti√≥n de proyectos tecnol√≥gicos"],
                            ["Tech Lead / Arquitecto", "Define la arquitectura del sistema, est√°ndares t√©cnicos y lineamientos de integraci√≥n", "Experiencia en arquitecturas de sistemas empresariales"],
                            ["Front-End Developer", "Desarrolla la interfaz de usuario seg√∫n principios de usabilidad y accesibilidad", "React, TypeScript, dise√±o responsive"],
                            ["Back-End Developer", "Desarrolla la l√≥gica de negocio, APIs RESTful y control de flujos de datos", "Django, Python, APIs RESTful"],
                            ["UX/UI Designer", "Dise√±a la experiencia y la interfaz de usuario, intuitiva e inclusiva", "Dise√±o centrado en usuario, accesibilidad"],
                            ["QA / Tester Funcional", "Dise√±a y ejecuta pruebas automatizadas y manuales", "Testing automatizado, casos de uso empresariales"],
                            ["DevSecOps", "Gestiona entornos en la nube, automatiza despliegues, configura monitoreo", "Docker, Kubernetes, AWS/Azure"]
                        ]
                    }
                },
                {
                    "id": "7",
                    "title": "Metodolog√≠a de Implementaci√≥n",
                    "type": "text",
                    "content": "La implementaci√≥n se realizar√° bajo la modalidad \"llave en mano\", utilizando un enfoque metodol√≥gico basado en Disciplined Agile del PMI:\n\nFase 1 - Inception (1 mes):\n‚Ä¢ Refinamiento del alcance y visi√≥n del producto\n‚Ä¢ Consolidaci√≥n del equipo multidisciplinario\n‚Ä¢ Consolidaci√≥n de la arquitectura t√©cnica\n‚Ä¢ Confirmaci√≥n del backlog inicial y priorizaci√≥n de requisitos\n\nFase 2 - Construction (3 meses):\n‚Ä¢ Desarrollo incremental de los m√≥dulos\n‚Ä¢ Iteraciones cortas (1-2 semanas) con demostraciones frecuentes\n‚Ä¢ Implementaci√≥n progresiva de las integraciones\n‚Ä¢ Pruebas t√©cnicas continuas\n\nFase 3 - Transition (1 mes):\n‚Ä¢ Pruebas finales y transferencia tecnol√≥gica\n‚Ä¢ Capacitaci√≥n de personal t√©cnico\n‚Ä¢ Despliegue en producci√≥n\n‚Ä¢ Activaci√≥n de plan de soporte",
                    "pageBreak": True
                },
                {
                    "id": "8",
                    "title": "Garant√≠as y Soporte Post-implementaci√≥n",
                    "type": "text",
                    "content": f"{empresa_nombre} ofrece una pol√≠tica de garant√≠a y soporte post-implementaci√≥n que asegura la continuidad operativa del sistema:\n\nGarant√≠a T√©cnica (6 meses):\n‚Ä¢ Correcci√≥n sin costo de errores funcionales, bugs o defectos atribuibles al c√≥digo fuente\n‚Ä¢ Correcci√≥n de errores de configuraci√≥n en los entornos implementados\n‚Ä¢ Revisi√≥n y ajuste de integraciones con sistemas institucionales\n‚Ä¢ Actualizaci√≥n de la documentaci√≥n t√©cnica cuando se aplique alguna correcci√≥n\n\nSoporte Acompa√±ado:\n‚Ä¢ Resoluci√≥n de consultas operativas y funcionales para usuarios autorizados\n‚Ä¢ Acompa√±amiento en el monitoreo de integraciones y flujos cr√≠ticos\n‚Ä¢ Aplicaci√≥n de ajustes menores de configuraci√≥n\n‚Ä¢ Participaci√≥n en reuniones t√©cnicas mensuales\n\nClasificaci√≥n de Incidencias:\n‚Ä¢ Nivel 1 (Cr√≠tico): 2 horas h√°biles de respuesta\n‚Ä¢ Nivel 2 (Medio): 8 horas h√°biles de respuesta\n‚Ä¢ Nivel 3 (Leve): 24 horas h√°biles de respuesta"
                },
                {
                    "id": "9",
                    "title": "Plan de Capacitaci√≥n",
                    "type": "list",
                    "content": [
                        "Capacitaci√≥n funcional: 6 horas distribuidas en 2 a 3 sesiones seg√∫n perfil",
                        "Capacitaci√≥n t√©cnica (TI): 6 a 8 horas distribuidas en sesiones especializadas",
                        "Acompa√±amiento supervisado: 4 semanas posteriores a la puesta en marcha",
                        "Acceso permanente a materiales asincr√≥nicos",
                        "Manuales de usuario diferenciados por perfil",
                        "C√°psulas de video por funcionalidad clave (2 a 5 minutos)",
                        "Documentaci√≥n t√©cnica estructurada",
                        "Entorno de prueba (sandbox) disponible por 30 d√≠as",
                        "Preguntas frecuentes (FAQ) actualizadas"
                    ]
                },
                {
                    "id": "10",
                    "title": "Experiencia y Referencias",
                    "type": "text",
                    "content": f"{empresa_nombre} cuenta con m√°s de 20 a√±os de experiencia en desarrollo de productos digitales, con presencia en Latinoam√©rica y Europa. Experiencia relevante en el sector empresarial:\n\n‚Ä¢ Pontificia Universidad Cat√≥lica de Chile: Plataforma de Evaluaci√≥n de Madurez en Gesti√≥n TI\n‚Ä¢ Universidad Santo Tom√°s: Plataforma administrativa con hiperautomatizaci√≥n\n‚Ä¢ Universidad Alberto Hurtado: Plataforma administrativa con hiperautomatizaci√≥n\n‚Ä¢ Universidad de Las Am√©ricas: Plataforma para apoyo a personas con discapacidad cognitiva\n‚Ä¢ Bomberos de Chile: Apoyo integral a la Academia Nacional de Bomberos\n\nEl equipo cuenta con especialistas en tecnolog√≠as empresariales, desarrolladores full-stack, arquitectos de software, y especialistas en experiencia de usuario. Se posee una s√≥lida trayectoria en el dise√±o e implementaci√≥n de soluciones para instituciones p√∫blicas y privadas en Chile y Latinoam√©rica.",
                    "pageBreak": True
                },
                {
                    "id": "11",
                    "title": "Factores Clave para el √âxito",
                    "type": "list",
                    "content": [
                        "Coordinaci√≥n y ejecuci√≥n de entrevistas y focus groups con participaci√≥n activa del cliente",
                        "Disponibilidad de APIs y sistemas existentes dentro de los plazos definidos",
                        "Documentaci√≥n clara de APIs, ambientes de prueba y autenticaci√≥n segura",
                        "Ambientes estables para QA y producci√≥n desde etapas tempranas",
                        "Dedicaci√≥n de colaboradores clave del cliente para validaci√≥n y ejecuci√≥n",
                        "Gesti√≥n de licencias de software, hardware especializado o insumos espec√≠ficos por parte del cliente",
                        "Cumplimiento normativo y alineaci√≥n con regulaciones vigentes en Chile"
                    ]
                },
                {
                    "id": "12",
                    "title": "Cronograma Detallado del Proyecto",
                    "type": "table",
                    "content": {
                        "headers": ["Etapa", "Duraci√≥n", "Actividades Principales", "Entregables"],
                        "rows": [
                            ["Inception", "1 mes", "Definici√≥n de requerimientos, an√°lisis preliminar, identificaci√≥n de actores", "Documento de especificaci√≥n detallado y roadmap del proyecto"],
                            ["Construction", "3 meses", "Desarrollo iterativo-incremental de m√≥dulos, integraciones cr√≠ticas", "Versiones funcionales incrementales de la plataforma"],
                            ["Transition", "1 mes", "Pruebas finales, transferencia tecnol√≥gica, capacitaci√≥n, despliegue", "Soluci√≥n operativa en ambiente del cliente"]
                        ]
                    }
                },
                {
                    "id": "13",
                    "title": "Inversi√≥n y Condiciones de Pago",
                    "type": "text",
                    "content": f"Costo Total del Proyecto: ${costo_total:,} (pesos chilenos)\n\nDesglose de Costos:\n‚Ä¢ Desarrollo de plataforma web: ${int(costo_total * 0.71):,}\n‚Ä¢ Integraciones con sistemas institucionales: ${int(costo_total * 0.18):,}\n‚Ä¢ Capacitaci√≥n y transferencia tecnol√≥gica: ${int(costo_total * 0.07):,}\n‚Ä¢ Documentaci√≥n y soporte inicial: ${int(costo_total * 0.04):,}\n\nCondiciones de Pago:\n‚Ä¢ 30% al inicio del proyecto (firma de contrato)\n‚Ä¢ 40% al completar la Fase de Construction\n‚Ä¢ 30% al completar la Fase de Transition y aceptaci√≥n del sistema\n\nGarant√≠as Incluidas:\n‚Ä¢ Garant√≠a t√©cnica por 6 meses\n‚Ä¢ Soporte post-implementaci√≥n por 6 meses\n‚Ä¢ Actualizaciones de seguridad gratuitas\n‚Ä¢ Capacitaci√≥n completa del equipo t√©cnico"
                }
            ],
            "styling": {
                "primaryColor": "#2563eb",
                "secondaryColor": "#1e40af",
                "fontFamily": "Arial, sans-serif"
            }
        }

    def _analizar_licitaciones_detallado(self, licitaciones: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Analiza las licitaciones para extraer informaci√≥n clave del proyecto"""
        print("üîç Analizando licitaciones para entender el proyecto...")
        
        try:
            # Dividir el an√°lisis en partes m√°s peque√±as para evitar exceder tokens
            analisis_final = {}
            
            # Parte 1: An√°lisis b√°sico del cliente y sector
            print("üìã Analizando cliente y sector...")
            analisis_basico = self._analizar_cliente_sector(licitaciones)
            analisis_final.update(analisis_basico)
            
            # Parte 2: An√°lisis del proyecto y objetivos
            print("üéØ Analizando proyecto y objetivos...")
            analisis_proyecto = self._analizar_proyecto_objetivos(licitaciones)
            analisis_final.update(analisis_proyecto)
            
            # Parte 3: An√°lisis t√©cnico
            print("‚öôÔ∏è Analizando requisitos t√©cnicos...")
            analisis_tecnico = self._analizar_requisitos_tecnicos(licitaciones)
            analisis_final.update(analisis_tecnico)
            
            print(f"‚úÖ An√°lisis completado: {analisis_final.get('objetivo_principal', 'N/A')[:100]}...")
            return analisis_final
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error en an√°lisis detallado: {e}")
            return self._analisis_fallback()
        
    def _analizar_cliente_sector(self, licitaciones: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Analiza informaci√≥n b√°sica del cliente y sector"""
        
        # Extraer solo informaci√≥n clave de la primera licitaci√≥n
        if not licitaciones:
            return {"nombre_cliente": "Cliente", "sector": "Tecnolog√≠a", "usuarios_finales": ["Usuarios"]}
        
        licitacion = licitaciones[0]
        
        # Buscar informaci√≥n espec√≠fica del cliente en secciones clave
        contenido_cliente = ""
        secciones_cliente = ['titulo', 'encabezado', 'header', 'cliente', 'empresa', 'organizacion', 'institucion']
        
        for seccion, contenido in licitacion['datos'].items():
            if any(palabra in seccion.lower() for palabra in secciones_cliente):
                if isinstance(contenido, str) and len(contenido) > 50:
                    contenido_cliente += f"{seccion}: {contenido[:200]}\n"
        
        # Si no encontramos informaci√≥n espec√≠fica, usar las primeras secciones
        if not contenido_cliente:
            for seccion, contenido in list(licitacion['datos'].items())[:3]:
                if isinstance(contenido, str) and len(contenido) > 20:
                    contenido_cliente += f"{seccion}: {contenido[:150]}\n"
        
        prompt = f"""
        Analiza este contenido y extrae informaci√≥n del cliente:
        
        CONTENIDO:
        {contenido_cliente}
        
        ARCHIVO: {licitacion['archivo']}
        
        TAREA:
        Busca EXHAUSTIVAMENTE el nombre del cliente y su sector.
        
        Devuelve SOLO un JSON:
        {{
            "nombre_cliente": "Nombre espec√≠fico del cliente",
            "sector": "Sector espec√≠fico (bancario, educativo, salud, etc.)",
            "usuarios_finales": ["Usuarios espec√≠ficos del sector"]
        }}
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres experto en identificar clientes y sectores. Busca nombres espec√≠ficos."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.1
            )
            
            contenido = response.choices[0].message.content.strip()
            return json.loads(self._extraer_json(contenido))
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error en an√°lisis de cliente: {e}")
            return {
                "nombre_cliente": "Cliente",
                "sector": "Tecnolog√≠a",
                "usuarios_finales": ["Usuarios del sistema"]
            }

    def _analizar_proyecto_objetivos(self, licitaciones: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Analiza objetivos y alcance del proyecto"""
        
        if not licitaciones:
            return {
                "objetivo_principal": "Desarrollar sistema tecnol√≥gico",
                "alcance": "Sistema completo",
                "tipo_sistema": "Sistema web",
                "complejidad": "MEDIA"
            }
        
        licitacion = licitaciones[0]
        
        # Buscar secciones espec√≠ficas del proyecto
        contenido_proyecto = ""
        secciones_proyecto = ['objetivo', 'alcance', 'proyecto', 'sistema', 'desarrollo', 'implementacion']
        
        for seccion, contenido in licitacion['datos'].items():
            if any(palabra in seccion.lower() for palabra in secciones_proyecto):
                if isinstance(contenido, str) and len(contenido) > 30:
                    contenido_proyecto += f"{seccion}: {contenido[:180]}\n"
        
        # Si no encontramos secciones espec√≠ficas, usar contenido general
        if not contenido_proyecto:
            for seccion, contenido in list(licitacion['datos'].items())[:4]:
                if isinstance(contenido, str) and len(contenido) > 20:
                    contenido_proyecto += f"{seccion}: {contenido[:120]}\n"
        
        prompt = f"""
        Analiza este contenido y extrae informaci√≥n del proyecto:
        
        CONTENIDO:
        {contenido_proyecto}
        
        ARCHIVO: {licitacion['archivo']}
        
        TAREA:
        Extrae informaci√≥n espec√≠fica del proyecto:
        
        Devuelve SOLO un JSON:
        {{
            "objetivo_principal": "Objetivo espec√≠fico del proyecto",
            "alcance": "Alcance espec√≠fico del proyecto",
            "tipo_sistema": "Tipo de sistema requerido",
            "complejidad": "BAJA/MEDIA/ALTA"
        }}
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres experto en an√°lisis de proyectos tecnol√≥gicos. Extrae informaci√≥n espec√≠fica."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.1
            )
            
            contenido = response.choices[0].message.content.strip()
            return json.loads(self._extraer_json(contenido))
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error en an√°lisis de proyecto: {e}")
            return {
                "objetivo_principal": "Desarrollar sistema tecnol√≥gico",
                "alcance": "Sistema completo",
                "tipo_sistema": "Sistema web",
                "complejidad": "MEDIA"
            }

    def _analizar_requisitos_tecnicos(self, licitaciones: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Analiza requisitos t√©cnicos y tecnolog√≠as"""
        
        if not licitaciones:
            return {
                "requisitos_tecnicos": ["Sistema web", "Base de datos"],
                "tecnologias_mencionadas": ["Python", "React"],
                "restricciones": ["Sin restricciones espec√≠ficas"]
            }
        
        licitacion = licitaciones[0]
        
        # Buscar secciones t√©cnicas
        contenido_tecnico = ""
        secciones_tecnico = ['requisitos', 'tecnico', 'tecnologia', 'sistema', 'plataforma', 'software', 'hardware']
        
        for seccion, contenido in licitacion['datos'].items():
            if any(palabra in seccion.lower() for palabra in secciones_tecnico):
                if isinstance(contenido, str) and len(contenido) > 30:
                    contenido_tecnico += f"{seccion}: {contenido[:150]}\n"
        
        # Si no encontramos secciones t√©cnicas, usar contenido general
        if not contenido_tecnico:
            for seccion, contenido in list(licitacion['datos'].items())[:3]:
                if isinstance(contenido, str) and len(contenido) > 20:
                    contenido_tecnico += f"{seccion}: {contenido[:100]}\n"
        
        prompt = f"""
        Analiza este contenido y extrae informaci√≥n t√©cnica:
        
        CONTENIDO:
        {contenido_tecnico}
        
        ARCHIVO: {licitacion['archivo']}
        
        TAREA:
        Extrae requisitos t√©cnicos espec√≠ficos:
        
        Devuelve SOLO un JSON:
        {{
            "requisitos_tecnicos": ["Requisitos espec√≠ficos"],
            "tecnologias_mencionadas": ["Tecnolog√≠as espec√≠ficas"],
            "restricciones": ["Restricciones espec√≠ficas"]
        }}
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres experto en an√°lisis t√©cnico. Extrae requisitos espec√≠ficos."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.1
            )
            
            contenido = response.choices[0].message.content.strip()
            return json.loads(self._extraer_json(contenido))
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error en an√°lisis t√©cnico: {e}")
            return {
                "requisitos_tecnicos": ["Sistema web", "Base de datos"],
                "tecnologias_mencionadas": ["Python", "React"],
                "restricciones": ["Sin restricciones espec√≠ficas"]
            }

    def _analisis_fallback(self) -> Dict[str, Any]:
        """An√°lisis de fallback cuando no se puede hacer an√°lisis detallado"""
        return {
            "nombre_cliente": "Cliente",
            "sector": "Tecnolog√≠a",
            "objetivo_principal": "Desarrollo de sistema tecnol√≥gico",
            "alcance": "Implementaci√≥n de soluci√≥n integral",
            "requisitos_tecnicos": ["Sistema web", "Base de datos", "Interfaz de usuario"],
            "tipo_sistema": "Sistema web",
            "usuarios_finales": ["Usuarios finales"],
            "funcionalidades_especificas": ["Gesti√≥n de datos", "Reportes"],
            "plazos": "5 meses",
            "criterios_evaluacion": ["Calidad t√©cnica", "Experiencia"],
            "contexto_proyecto": "Necesidad de modernizaci√≥n tecnol√≥gica",
            "presupuesto": "No especificado",
            "integraciones": ["Sistemas existentes"],
            "requisitos_seguridad": ["Est√°ndares de seguridad"],
            "capacitacion": "Capacitaci√≥n de usuarios",
            "resumen_proyecto": "Proyecto de desarrollo tecnol√≥gico"
        }

    def _crear_prompt_estructura_json_mejorado(self, licitaciones: List[Dict[str, Any]], analisis_proyecto: Dict[str, Any], empresa_nombre: str, empresa_descripcion: str, nombre_proyecto: str, cliente: str, fecha: str, costo_total: int, plazo: str) -> str:
        """Crea un prompt mejorado con an√°lisis previo del proyecto"""
        
        # Preparar informaci√≥n de las licitaciones
        info_licitaciones = "LICITACIONES A ANALIZAR:\n"
        for i, licitacion in enumerate(licitaciones, 1):
            info_licitaciones += f"\n--- LICITACI√ìN {i}: {licitacion['archivo']} ---\n"
            for seccion, contenido in licitacion['datos'].items():
                if contenido:
                    info_licitaciones += f"{seccion}: {str(contenido)[:300]}...\n"
            info_licitaciones += "---\n"

        return (
            "Eres un experto en generaci√≥n de ofertas t√©cnicas para GUX Technologies. "
            "Debes generar una oferta t√©cnica en formato JSON EXACTO con la siguiente estructura:\n\n"
            "{\n"
            '   "projectInfo": {\n'
            '      "name": "Nombre del Proyecto",\n'
            '      "client": "Nombre del Cliente",\n'
            '      "date": "Fecha",\n'
            '      "totalCost": 45000000,\n'
            '      "timeline": "5 meses"\n'
            "   },\n"
            '   "sections": [\n'
            "      {\n"
            '         "id": "1",\n'
            '         "title": "Resumen Ejecutivo",\n'
            '         "type": "text",\n'
            '         "content": "Contenido detallado...",\n'
            '         "pageBreak": true\n'
            "      }\n"
            "   ],\n"
            '   "styling": {\n'
            '      "primaryColor": "#2563eb",\n'
            '      "secondaryColor": "#1e40af",\n'
            '      "fontFamily": "Arial, sans-serif"\n'
            "   }\n"
            "}\n\n"
            "AN√ÅLISIS PREVIO DEL PROYECTO:\n"
            f"‚Ä¢ Cliente: {analisis_proyecto.get('nombre_cliente', 'N/A')}\n"
            f"‚Ä¢ Sector: {analisis_proyecto.get('sector', 'N/A')}\n"
            f"‚Ä¢ Objetivo Principal: {analisis_proyecto.get('objetivo_principal', 'N/A')}\n"
            f"‚Ä¢ Alcance: {analisis_proyecto.get('alcance', 'N/A')}\n"
            f"‚Ä¢ Tipo de Sistema: {analisis_proyecto.get('tipo_sistema', 'N/A')}\n"
            f"‚Ä¢ Usuarios Finales: {', '.join(analisis_proyecto.get('usuarios_finales', []))}\n"
            f"‚Ä¢ Funcionalidades Espec√≠ficas: {', '.join(analisis_proyecto.get('funcionalidades_especificas', []))}\n"
            f"‚Ä¢ Requisitos T√©cnicos: {', '.join(analisis_proyecto.get('requisitos_tecnicos', []))}\n"
            f"‚Ä¢ Contexto del Proyecto: {analisis_proyecto.get('contexto_proyecto', 'N/A')}\n"
            f"‚Ä¢ Resumen del Proyecto: {analisis_proyecto.get('resumen_proyecto', 'N/A')}\n\n"
            "TIPOS DE CONTENIDO:\n"
            "- 'text': Para p√°rrafos largos de texto (m√≠nimo 500 caracteres por secci√≥n)\n"
            "- 'list': Para listas de elementos (array de strings, m√≠nimo 5 elementos)\n"
            "- 'table': Para tablas con headers y rows (m√≠nimo 3 filas)\n\n"
            "SECCIONES OBLIGATORIAS CON CONTENIDO DETALLADO:\n"
            "1. Resumen Ejecutivo (text, pageBreak: true) - M√≠nimo 800 caracteres\n"
            "2. Alcance del Servicio (list) - M√≠nimo 7 elementos detallados\n"
            "3. Funcionalidades Clave del Sistema (text, pageBreak: true) - M√≠nimo 1000 caracteres\n"
            "4. Tipos de Usuarios y Permisos (table) - M√≠nimo 3 filas con 3 columnas\n"
            "5. Infraestructura Tecnol√≥gica (text, pageBreak: true) - M√≠nimo 800 caracteres\n"
            "6. Equipo de Trabajo Asignado (table) - M√≠nimo 6 filas con roles detallados\n"
            "7. Metodolog√≠a de Implementaci√≥n (text, pageBreak: true) - M√≠nimo 1000 caracteres\n"
            "8. Garant√≠as y Soporte Post-implementaci√≥n (text) - M√≠nimo 800 caracteres\n"
            "9. Plan de Capacitaci√≥n (list) - M√≠nimo 8 elementos\n"
            "10. Experiencia y Referencias (text, pageBreak: true) - M√≠nimo 800 caracteres\n"
            "11. Factores Clave para el √âxito (list) - M√≠nimo 6 elementos\n"
            "12. Cronograma Detallado del Proyecto (table) - M√≠nimo 3 filas con etapas\n"
            "13. Inversi√≥n y Condiciones de Pago (text) - M√≠nimo 600 caracteres\n\n"
            "REQUISITOS ESPEC√çFICOS:\n"
            "- El Resumen Ejecutivo debe mencionar espec√≠ficamente el CLIENTE y su SECTOR\n"
            "- El Resumen Ejecutivo debe explicar claramente el objetivo del proyecto analizado\n"
            "- Las Funcionalidades Clave deben describir espec√≠ficamente las funcionalidades identificadas en las licitaciones\n"
            "- El Alcance del Servicio debe basarse en el alcance real identificado\n"
            "- Personalizar TODO el contenido para el CLIENTE ESPEC√çFICO y su SECTOR\n"
            "- Usar la informaci√≥n t√©cnica espec√≠fica identificada\n"
            "- Incluir detalles sobre usuarios finales espec√≠ficos del sector\n"
            "- Mencionar el contexto y por qu√© el cliente necesita esta soluci√≥n\n\n"
            f"INFORMACI√ìN DEL PROYECTO:\n"
            f"- Nombre: {nombre_proyecto}\n"
            f"- Cliente: {cliente}\n"
            f"- Fecha: {fecha}\n"
            f"- Costo Total: ${costo_total:,}\n"
            f"- Plazo: {plazo}\n"
            f"- Empresa: {empresa_nombre}\n"
            f"- Descripci√≥n: {empresa_descripcion}\n\n"
            f"{info_licitaciones}\n"
            "INSTRUCCIONES ESPEC√çFICAS:\n"
            "1. Usa el an√°lisis previo para entender EXACTAMENTE el proyecto\n"
            "2. Genera contenido ESPEC√çFICO y RELEVANTE para el proyecto analizado\n"
            "3. Personaliza cada secci√≥n con la informaci√≥n real de las licitaciones\n"
            "4. Aseg√∫rate de que las Funcionalidades Clave describan el sistema real requerido\n"
            "5. Usa el formato JSON exacto especificado\n"
            "6. Incluye TODAS las secciones obligatorias con contenido sustancial\n"
            "7. Genera contenido ORIGINAL y PROFESIONAL\n"
            "8. Cada secci√≥n debe tener al menos el m√≠nimo de caracteres especificado\n\n"
            "IMPORTANTE: El contenido debe ser ESPEC√çFICO para el proyecto analizado, no gen√©rico."
        )

    def _mejorar_secciones_especificas(self, respuesta_json: Dict[str, Any], analisis_proyecto: Dict[str, Any], licitaciones: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Mejora secciones espec√≠ficas con an√°lisis adicional"""
        print("üîß Mejorando secciones espec√≠ficas...")
        
        # Mejorar Resumen Ejecutivo
        if "sections" in respuesta_json:
            for seccion in respuesta_json["sections"]:
                if seccion["title"] == "Resumen Ejecutivo" and seccion["type"] == "text":
                    seccion["content"] = self._mejorar_resumen_ejecutivo(seccion["content"], analisis_proyecto)
                
                elif seccion["title"] == "Funcionalidades Clave del Sistema" and seccion["type"] == "text":
                    seccion["content"] = self._mejorar_funcionalidades_clave(seccion["content"], analisis_proyecto, licitaciones)
                
                elif seccion["title"] == "Alcance del Servicio" and seccion["type"] == "list":
                    seccion["content"] = self._mejorar_alcance_servicio(seccion["content"], analisis_proyecto)
        
        return respuesta_json

    def _mejorar_resumen_ejecutivo(self, contenido_actual: str, analisis_proyecto: Dict[str, Any]) -> str:
        """Mejora el resumen ejecutivo con informaci√≥n espec√≠fica del proyecto"""
        prompt = f"""
        Mejora el siguiente resumen ejecutivo para que sea m√°s espec√≠fico y relevante al proyecto analizado.
        
        AN√ÅLISIS DEL PROYECTO:
        ‚Ä¢ Cliente: {analisis_proyecto.get('nombre_cliente', 'N/A')}
        ‚Ä¢ Sector: {analisis_proyecto.get('sector', 'N/A')}
        ‚Ä¢ Objetivo: {analisis_proyecto.get('objetivo_principal', 'N/A')}
        ‚Ä¢ Alcance: {analisis_proyecto.get('alcance', 'N/A')}
        ‚Ä¢ Tipo de Sistema: {analisis_proyecto.get('tipo_sistema', 'N/A')}
        ‚Ä¢ Usuarios: {', '.join(analisis_proyecto.get('usuarios_finales', []))}
        ‚Ä¢ Contexto: {analisis_proyecto.get('contexto_proyecto', 'N/A')}
        
        RESUMEN ACTUAL:
        {contenido_actual}
        
        INSTRUCCIONES:
        1. Mant√©n la estructura profesional
        2. MENCIONA ESPEC√çFICAMENTE el nombre del CLIENTE en el primer p√°rrafo
        3. MENCIONA el SECTOR espec√≠fico (bancario, educativo, salud, etc.)
        4. Incluye espec√≠ficamente el objetivo del proyecto analizado
        5. Menciona el tipo de sistema y sector espec√≠ficos
        6. Incluye informaci√≥n sobre usuarios finales espec√≠ficos del sector
        7. Explica por qu√© el cliente necesita esta soluci√≥n
        8. Haz el contenido m√°s espec√≠fico y menos gen√©rico
        9. Mant√©n al menos 800 caracteres
        
        IMPORTANTE: El primer p√°rrafo debe mencionar claramente el cliente y su sector.
        
        Devuelve SOLO el texto mejorado, sin explicaciones adicionales.
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres un experto en redacci√≥n de propuestas t√©cnicas. Mejora el contenido para que sea espec√≠fico y relevante."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.3
            )
            
            return response.choices[0].message.content.strip()
        except Exception as e:
            print(f"‚ö†Ô∏è Error mejorando resumen ejecutivo: {e}")
            return contenido_actual

    def _mejorar_funcionalidades_clave(self, contenido_actual: str, analisis_proyecto: Dict[str, Any], licitaciones: List[Dict[str, Any]]) -> str:
        """Mejora las funcionalidades clave con informaci√≥n espec√≠fica del proyecto"""
        
        # Preparar informaci√≥n espec√≠fica de las licitaciones
        info_especifica = ""
        for licitacion in licitaciones:
            for seccion, contenido in licitacion['datos'].items():
                if any(palabra in seccion.upper() for palabra in ['FUNCIONALIDAD', 'REQUISITO', 'CARACTER√çSTICA', 'M√ìDULO']):
                    info_especifica += f"{seccion}: {contenido}\n"
        
        prompt = f"""
        Mejora la secci√≥n de Funcionalidades Clave del Sistema para que describa espec√≠ficamente las funcionalidades requeridas en el proyecto analizado.
        
        AN√ÅLISIS DEL PROYECTO:
        ‚Ä¢ Cliente: {analisis_proyecto.get('nombre_cliente', 'N/A')}
        ‚Ä¢ Sector: {analisis_proyecto.get('sector', 'N/A')}
        ‚Ä¢ Objetivo: {analisis_proyecto.get('objetivo_principal', 'N/A')}
        ‚Ä¢ Tipo de Sistema: {analisis_proyecto.get('tipo_sistema', 'N/A')}
        ‚Ä¢ Funcionalidades Identificadas: {', '.join(analisis_proyecto.get('funcionalidades_especificas', []))}
        ‚Ä¢ Requisitos T√©cnicos: {', '.join(analisis_proyecto.get('requisitos_tecnicos', []))}
        
        INFORMACI√ìN ESPEC√çFICA DE LAS LICITACIONES:
        {info_especifica}
        
        CONTENIDO ACTUAL:
        {contenido_actual}
        
        INSTRUCCIONES:
        1. MENCIONA el CLIENTE y su SECTOR en la introducci√≥n
        2. Describe espec√≠ficamente las funcionalidades identificadas en las licitaciones
        3. Incluye m√≥dulos espec√≠ficos del sistema requerido para el sector
        4. Menciona caracter√≠sticas t√©cnicas espec√≠ficas
        5. Relaciona las funcionalidades con el objetivo del proyecto y el sector
        6. Haz el contenido m√°s espec√≠fico y menos gen√©rico
        7. Mant√©n al menos 1000 caracteres
        8. Usa la informaci√≥n t√©cnica espec√≠fica identificada
        9. Adapta las funcionalidades al contexto del sector del cliente
        
        IMPORTANTE: El contenido debe ser espec√≠fico para el cliente y su sector.
        
        Devuelve SOLO el texto mejorado, sin explicaciones adicionales.
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres un experto en an√°lisis de sistemas y funcionalidades. Describe espec√≠ficamente las funcionalidades requeridas."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=600,
                temperature=0.3
            )
            
            return response.choices[0].message.content.strip()
        except Exception as e:
            print(f"‚ö†Ô∏è Error mejorando funcionalidades clave: {e}")
            return contenido_actual

    def _mejorar_alcance_servicio(self, contenido_actual: list, analisis_proyecto: Dict[str, Any]) -> list:
        """Mejora el alcance del servicio con informaci√≥n espec√≠fica del proyecto"""
        
        prompt = f"""
        Mejora la lista del Alcance del Servicio para que sea espec√≠fica al proyecto analizado.
        
        AN√ÅLISIS DEL PROYECTO:
        ‚Ä¢ Cliente: {analisis_proyecto.get('nombre_cliente', 'N/A')}
        ‚Ä¢ Sector: {analisis_proyecto.get('sector', 'N/A')}
        ‚Ä¢ Objetivo: {analisis_proyecto.get('objetivo_principal', 'N/A')}
        ‚Ä¢ Alcance: {analisis_proyecto.get('alcance', 'N/A')}
        ‚Ä¢ Tipo de Sistema: {analisis_proyecto.get('tipo_sistema', 'N/A')}
        ‚Ä¢ Usuarios Finales: {', '.join(analisis_proyecto.get('usuarios_finales', []))}
        
        ALCANCE ACTUAL:
        {contenido_actual}
        
        INSTRUCCIONES:
        1. Personaliza cada elemento para el CLIENTE ESPEC√çFICO y su SECTOR
        2. Incluye detalles espec√≠ficos del alcance identificado
        3. Menciona usuarios finales espec√≠ficos del sector
        4. Incluye requisitos t√©cnicos espec√≠ficos
        5. Haz el contenido m√°s espec√≠fico y menos gen√©rico
        6. Mant√©n al menos 7 elementos
        7. Usa la informaci√≥n espec√≠fica del proyecto analizado
        8. Adapta el alcance al contexto del sector del cliente
        
        IMPORTANTE: Cada elemento debe ser espec√≠fico para el cliente y su sector.
        
        Devuelve SOLO la lista mejorada en formato JSON array, sin explicaciones adicionales.
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres un experto en definici√≥n de alcances de proyectos. Personaliza el alcance para proyectos espec√≠ficos."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=800,
                temperature=0.3
            )
            
            contenido = response.choices[0].message.content.strip()
            # Extraer la lista del JSON
            import re
            match = re.search(r'\[.*\]', contenido, re.DOTALL)
            if match:
                return json.loads(match.group(0))
            else:
                return contenido_actual
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error mejorando alcance del servicio: {e}")
            return contenido_actual

    def _extraer_json(self, texto: str) -> str:
        """Extrae el primer bloque JSON de un texto"""
        import re
        match = re.search(r'\{[\s\S]*\}', texto)
        if match:
            return match.group(0)
        raise ValueError("No se encontr√≥ JSON en la respuesta de la IA") 

    def _calcular_parametros_proyecto_ia(self, licitaciones: List[Dict[str, Any]], analisis_proyecto: Dict[str, Any], empresa_nombre: str) -> Dict[str, Any]:
        """Calcula autom√°ticamente los par√°metros del proyecto usando IA"""
        
        print("üßÆ Calculando par√°metros del proyecto con IA...")
        
        # Usar solo la informaci√≥n clave del an√°lisis
        nombre_cliente = analisis_proyecto.get('nombre_cliente', 'Cliente')
        sector = analisis_proyecto.get('sector', 'Tecnolog√≠a')
        objetivo = analisis_proyecto.get('objetivo_principal', 'Desarrollar sistema')[:100]
        complejidad = analisis_proyecto.get('complejidad', 'MEDIA')
        
        # Extraer informaci√≥n clave del archivo
        archivo_info = ""
        if licitaciones:
            archivo_info = f"Archivo: {licitaciones[0]['archivo']}"
        
        # Calcular par√°metros basados en complejidad y sector
        if complejidad == "ALTA":
            costo_base = 80000000
            plazo_base = "8 meses"
        elif complejidad == "BAJA":
            costo_base = 25000000
            plazo_base = "3 meses"
        else:  # MEDIA
            costo_base = 45000000
            plazo_base = "5 meses"
        
        # Ajustar por sector
        if "bancario" in sector.lower():
            costo_base = int(costo_base * 1.3)
            plazo_base = "6 meses"
        elif "educativo" in sector.lower():
            costo_base = int(costo_base * 0.9)
            plazo_base = "4 meses"
        elif "salud" in sector.lower():
            costo_base = int(costo_base * 1.2)
            plazo_base = "7 meses"
        
        prompt = f"""
        Bas√°ndote en esta informaci√≥n, calcula los par√°metros del proyecto:
        
        CLIENTE: {nombre_cliente}
        SECTOR: {sector}
        OBJETIVO: {objetivo}
        COMPLEJIDAD: {complejidad}
        {archivo_info}
        EMPRESA: {empresa_nombre}
        
        TAREA:
        Calcula par√°metros realistas basados en complejidad y sector:
        
        Devuelve SOLO un JSON:
        {{
            "nombre_proyecto": "Nombre espec√≠fico del proyecto para {nombre_cliente}",
            "cliente": "{nombre_cliente}",
            "fecha": "2025",
            "costo_total": {costo_base},
            "plazo": "{plazo_base}"
        }}
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres experto en c√°lculo de par√°metros de proyectos."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=300,
                temperature=0.1
            )
            
            contenido = response.choices[0].message.content.strip()
            parametros = json.loads(self._extraer_json(contenido))
            
            print(f"‚úÖ Par√°metros calculados: {parametros}")
            return parametros
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error calculando par√°metros: {e}")
            # Fallback con valores calculados
            return {
                "nombre_proyecto": f"Proyecto {sector} - {nombre_cliente}",
                "cliente": nombre_cliente,
                "fecha": "2025",
                "costo_total": costo_base,
                "plazo": plazo_base
            }

    def _generar_oferta_estructurada_mejorada(self, licitaciones: List[Dict[str, Any]], analisis_proyecto: Dict[str, Any], parametros_proyecto: Dict[str, Any], empresa_nombre: str, empresa_descripcion: str) -> Dict[str, Any]:
        """Genera una oferta estructurada mejorada con par√°metros calculados por IA"""
        
        print("üìù Generando oferta estructurada mejorada...")
        
        # Extraer par√°metros
        nombre_proyecto = parametros_proyecto["nombre_proyecto"]
        cliente = parametros_proyecto["cliente"]
        fecha = parametros_proyecto["fecha"]
        costo_total = parametros_proyecto["costo_total"]
        plazo = parametros_proyecto["plazo"]
        
        # Extraer informaci√≥n clave del an√°lisis
        sector = analisis_proyecto.get('sector', 'Tecnolog√≠a')
        objetivo = analisis_proyecto.get('objetivo_principal', 'Desarrollar sistema')[:100]
        alcance = analisis_proyecto.get('alcance', 'Sistema completo')[:100]
        tipo_sistema = analisis_proyecto.get('tipo_sistema', 'Sistema web')
        usuarios = analisis_proyecto.get('usuarios_finales', ['Usuarios del sistema'])
        requisitos = analisis_proyecto.get('requisitos_tecnicos', ['Sistema web'])
        
        # Crear prompt optimizado con informaci√≥n espec√≠fica
        prompt = f"""
        Genera una oferta t√©cnica espec√≠fica para {cliente} del sector {sector}:
        
        PROYECTO: {nombre_proyecto}
        CLIENTE: {cliente}
        SECTOR: {sector}
        OBJETIVO: {objetivo}
        ALCANCE: {alcance}
        TIPO SISTEMA: {tipo_sistema}
        USUARIOS: {', '.join(usuarios)}
        REQUISITOS: {', '.join(requisitos)}
        FECHA: {fecha}
        COSTO: ${costo_total:,}
        PLAZO: {plazo}
        EMPRESA: {empresa_nombre}
        
        Genera JSON con estructura exacta:
        {{
            "projectInfo": {{
                "name": "{nombre_proyecto}",
                "client": "{cliente}",
                "date": "{fecha}",
                "totalCost": {costo_total},
                "timeline": "{plazo}"
            }},
            "sections": [
                {{
                    "id": "1",
                    "title": "Resumen Ejecutivo",
                    "type": "text",
                    "content": "Resumen espec√≠fico para {cliente} del sector {sector}...",
                    "pageBreak": true
                }}
            ],
            "styling": {{
                "primaryColor": "#2563eb",
                "secondaryColor": "#1e40af",
                "fontFamily": "Arial, sans-serif"
            }}
        }}
        
        IMPORTANTE: Personaliza TODO el contenido para {cliente} y el sector {sector}.
        """
        
        # Generar JSON estructurado usando IA
        try:
            respuesta_json = self._generar_json_estructurado_con_ia(
                prompt, 
                nombre_proyecto, 
                cliente, 
                fecha, 
                costo_total, 
                plazo, 
                empresa_nombre
            )
            
            return respuesta_json
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error generando oferta estructurada: {e}")
            # Fallback con estructura b√°sica
            return self._generar_estructura_fallback(
                nombre_proyecto, 
                cliente, 
                fecha, 
                costo_total, 
                plazo, 
                empresa_nombre
            )

    def _mejorar_secciones_especificas_avanzado(self, respuesta_json: Dict[str, Any], analisis_proyecto: Dict[str, Any], licitaciones: List[Dict[str, Any]], parametros_proyecto: Dict[str, Any]) -> Dict[str, Any]:
        """Mejora las secciones espec√≠ficas con an√°lisis avanzado y par√°metros calculados"""
        
        print("üîß Mejorando secciones espec√≠ficas con an√°lisis avanzado...")
        
        try:
            # Mejorar resumen ejecutivo
            if "resumen_ejecutivo" in respuesta_json:
                respuesta_json["resumen_ejecutivo"] = self._mejorar_resumen_ejecutivo_avanzado(
                    respuesta_json["resumen_ejecutivo"], 
                    analisis_proyecto, 
                    parametros_proyecto
                )
            
            # Mejorar funcionalidades clave
            if "funcionalidades_clave" in respuesta_json:
                respuesta_json["funcionalidades_clave"] = self._mejorar_funcionalidades_clave_avanzado(
                    respuesta_json["funcionalidades_clave"], 
                    analisis_proyecto, 
                    licitaciones,
                    parametros_proyecto
                )
            
            # Mejorar alcance del servicio
            if "alcance_servicio" in respuesta_json:
                respuesta_json["alcance_servicio"] = self._mejorar_alcance_servicio_avanzado(
                    respuesta_json["alcance_servicio"], 
                    analisis_proyecto,
                    parametros_proyecto
                )
            
            # Mejorar cronograma de implementaci√≥n
            if "cronograma_implementacion" in respuesta_json:
                respuesta_json["cronograma_implementacion"] = self._mejorar_cronograma_implementacion(
                    respuesta_json["cronograma_implementacion"],
                    parametros_proyecto
                )
            
            # Mejorar presupuesto detallado
            if "presupuesto_detallado" in respuesta_json:
                respuesta_json["presupuesto_detallado"] = self._mejorar_presupuesto_detallado(
                    respuesta_json["presupuesto_detallado"],
                    parametros_proyecto,
                    analisis_proyecto
                )
            
            return respuesta_json
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error mejorando secciones espec√≠ficas: {e}")
            return respuesta_json

    def _mejorar_resumen_ejecutivo_avanzado(self, contenido_actual: str, analisis_proyecto: Dict[str, Any], parametros_proyecto: Dict[str, Any]) -> str:
        """Mejora el resumen ejecutivo con an√°lisis avanzado y par√°metros calculados"""
        
        prompt = f"""
        Mejora el Resumen Ejecutivo para que sea espec√≠fico al proyecto analizado y use los par√°metros calculados.
        
        AN√ÅLISIS DEL PROYECTO:
        {json.dumps(analisis_proyecto, indent=2, ensure_ascii=False)}
        
        PAR√ÅMETROS CALCULADOS:
        {json.dumps(parametros_proyecto, indent=2, ensure_ascii=False)}
        
        CONTENIDO ACTUAL:
        {contenido_actual}
        
        INSTRUCCIONES:
        1. MENCIONA el CLIENTE espec√≠fico y su SECTOR
        2. Incluye el NOMBRE DEL PROYECTO calculado
        3. Menciona el COSTO TOTAL y PLAZO calculados
        4. Describe el OBJETIVO PRINCIPAL del proyecto
        5. Menciona las TECNOLOG√çAS y SOLUCIONES espec√≠ficas
        6. Incluye BENEFICIOS ESPERADOS para el cliente
        7. Haz el contenido m√°s espec√≠fico y menos gen√©rico
        8. Mant√©n al menos 1500 caracteres
        9. Usa la informaci√≥n t√©cnica espec√≠fica identificada
        10. Adapta el resumen al contexto del sector del cliente
        
        IMPORTANTE: El contenido debe ser espec√≠fico para el cliente y usar los par√°metros calculados.
        
        Devuelve SOLO el texto mejorado, sin explicaciones adicionales.
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres un experto en res√∫menes ejecutivos de proyectos tecnol√≥gicos. Crea res√∫menes espec√≠ficos y persuasivos."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=800,
                temperature=0.3
            )
            
            return response.choices[0].message.content.strip()
        except Exception as e:
            print(f"‚ö†Ô∏è Error mejorando resumen ejecutivo avanzado: {e}")
            return contenido_actual

    def _mejorar_funcionalidades_clave_avanzado(self, contenido_actual: str, analisis_proyecto: Dict[str, Any], licitaciones: List[Dict[str, Any]], parametros_proyecto: Dict[str, Any]) -> str:
        """Mejora las funcionalidades clave con an√°lisis avanzado y par√°metros calculados"""
        
        # Preparar informaci√≥n espec√≠fica de las licitaciones
        info_especifica = ""
        for lic in licitaciones:
            info_especifica += f"\nArchivo: {lic['archivo']}\n"
            info_especifica += f"Datos: {json.dumps(lic['datos'], indent=2, ensure_ascii=False)}\n"
        
        prompt = f"""
        Mejora las Funcionalidades Clave del Sistema para que sea espec√≠fica al proyecto analizado y use los par√°metros calculados.
        
        AN√ÅLISIS DEL PROYECTO:
        {json.dumps(analisis_proyecto, indent=2, ensure_ascii=False)}
        
        PAR√ÅMETROS CALCULADOS:
        {json.dumps(parametros_proyecto, indent=2, ensure_ascii=False)}
        
        INFORMACI√ìN ESPEC√çFICA DE LICITACIONES:
        {info_especifica}
        
        CONTENIDO ACTUAL:
        {contenido_actual}
        
        INSTRUCCIONES:
        1. MENCIONA el CLIENTE espec√≠fico y su SECTOR
        2. Incluye el NOMBRE DEL PROYECTO calculado
        3. Describe espec√≠ficamente las funcionalidades identificadas en las licitaciones
        4. Incluye m√≥dulos espec√≠ficos del sistema requerido para el sector
        5. Menciona caracter√≠sticas t√©cnicas espec√≠ficas
        6. Relaciona las funcionalidades con el objetivo del proyecto y el sector
        7. Haz el contenido m√°s espec√≠fico y menos gen√©rico
        8. Mant√©n al menos 1500 caracteres
        9. Usa la informaci√≥n t√©cnica espec√≠fica identificada
        10. Adapta las funcionalidades al contexto del sector del cliente
        
        IMPORTANTE: El contenido debe ser espec√≠fico para el cliente y usar los par√°metros calculados.
        
        Devuelve SOLO el texto mejorado, sin explicaciones adicionales.
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres un experto en an√°lisis de sistemas y funcionalidades. Describe espec√≠ficamente las funcionalidades requeridas."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=800,
                temperature=0.3
            )
            
            return response.choices[0].message.content.strip()
        except Exception as e:
            print(f"‚ö†Ô∏è Error mejorando funcionalidades clave avanzado: {e}")
            return contenido_actual

    def _mejorar_alcance_servicio_avanzado(self, contenido_actual: list, analisis_proyecto: Dict[str, Any], parametros_proyecto: Dict[str, Any]) -> list:
        """Mejora el alcance del servicio con an√°lisis avanzado y par√°metros calculados"""
        
        prompt = f"""
        Mejora la lista del Alcance del Servicio para que sea espec√≠fica al proyecto analizado y use los par√°metros calculados.
        
        AN√ÅLISIS DEL PROYECTO:
        {json.dumps(analisis_proyecto, indent=2, ensure_ascii=False)}
        
        PAR√ÅMETROS CALCULADOS:
        {json.dumps(parametros_proyecto, indent=2, ensure_ascii=False)}
        
        ALCANCE ACTUAL:
        {contenido_actual}
        
        INSTRUCCIONES:
        1. Personaliza cada elemento para el CLIENTE ESPEC√çFICO y su SECTOR
        2. Incluye el NOMBRE DEL PROYECTO calculado
        3. Menciona el PLAZO y COSTO calculados
        4. Incluye detalles espec√≠ficos del alcance identificado
        5. Menciona usuarios finales espec√≠ficos del sector
        6. Incluye requisitos t√©cnicos espec√≠ficos
        7. Haz el contenido m√°s espec√≠fico y menos gen√©rico
        8. Mant√©n al menos 8 elementos
        9. Usa la informaci√≥n espec√≠fica del proyecto analizado
        10. Adapta el alcance al contexto del sector del cliente
        
        IMPORTANTE: Cada elemento debe ser espec√≠fico para el cliente y usar los par√°metros calculados.
        
        Devuelve SOLO la lista mejorada en formato JSON array, sin explicaciones adicionales.
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres un experto en definici√≥n de alcances de proyectos. Personaliza el alcance para proyectos espec√≠ficos."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.3
            )
            
            contenido = response.choices[0].message.content.strip()
            # Extraer la lista del JSON
            import re
            match = re.search(r'\[.*\]', contenido, re.DOTALL)
            if match:
                return json.loads(match.group(0))
            else:
                return contenido_actual
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error mejorando alcance del servicio avanzado: {e}")
            return contenido_actual

    def _mejorar_cronograma_implementacion(self, contenido_actual: Dict[str, Any], parametros_proyecto: Dict[str, Any]) -> Dict[str, Any]:
        """Mejora el cronograma de implementaci√≥n basado en los par√°metros calculados"""
        
        plazo = parametros_proyecto["plazo"]
        
        prompt = f"""
        Mejora el Cronograma de Implementaci√≥n para que sea espec√≠fico al proyecto y use el plazo calculado.
        
        PAR√ÅMETROS CALCULADOS:
        {json.dumps(parametros_proyecto, indent=2, ensure_ascii=False)}
        
        PLAZO CALCULADO: {plazo}
        
        CRONOGRAMA ACTUAL:
        {json.dumps(contenido_actual, indent=2, ensure_ascii=False)}
        
        INSTRUCCIONES:
        1. Ajusta las fechas y duraciones seg√∫n el PLAZO CALCULADO
        2. Incluye el NOMBRE DEL PROYECTO calculado
        3. Menciona el CLIENTE espec√≠fico
        4. Distribuye las actividades de manera realista
        5. Incluye hitos importantes del proyecto
        6. Haz el cronograma m√°s espec√≠fico y detallado
        7. Mant√©n la estructura de fases pero ajusta los tiempos
        8. Usa la informaci√≥n espec√≠fica del proyecto analizado
        
        IMPORTANTE: El cronograma debe ser realista y usar el plazo calculado.
        
        Devuelve SOLO el JSON mejorado, sin explicaciones adicionales.
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres un experto en planificaci√≥n de proyectos. Crea cronogramas realistas y detallados."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=600,
                temperature=0.2
            )
            
            contenido = response.choices[0].message.content.strip()
            return json.loads(self._extraer_json(contenido))
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error mejorando cronograma de implementaci√≥n: {e}")
            return contenido_actual

    def _mejorar_presupuesto_detallado(self, contenido_actual: Dict[str, Any], parametros_proyecto: Dict[str, Any], analisis_proyecto: Dict[str, Any]) -> Dict[str, Any]:
        """Mejora el presupuesto detallado basado en los par√°metros calculados"""
        
        costo_total = parametros_proyecto["costo_total"]
        
        prompt = f"""
        Mejora el Presupuesto Detallado para que sea espec√≠fico al proyecto y use el costo calculado.
        
        PAR√ÅMETROS CALCULADOS:
        {json.dumps(parametros_proyecto, indent=2, ensure_ascii=False)}
        
        COSTO TOTAL CALCULADO: ${costo_total:,} CLP
        
        AN√ÅLISIS DEL PROYECTO:
        {json.dumps(analisis_proyecto, indent=2, ensure_ascii=False)}
        
        PRESUPUESTO ACTUAL:
        {json.dumps(contenido_actual, indent=2, ensure_ascii=False)}
        
        INSTRUCCIONES:
        1. Ajusta los montos para que sumen el COSTO TOTAL CALCULADO
        2. Incluye el NOMBRE DEL PROYECTO calculado
        3. Menciona el CLIENTE espec√≠fico
        4. Distribuye el presupuesto de manera realista seg√∫n la complejidad
        5. Incluye partidas espec√≠ficas del tipo de proyecto
        6. Haz el presupuesto m√°s espec√≠fico y detallado
        7. Mant√©n la estructura pero ajusta los montos
        8. Usa la informaci√≥n espec√≠fica del proyecto analizado
        
        IMPORTANTE: El presupuesto debe sumar el costo total calculado y ser realista.
        
        Devuelve SOLO el JSON mejorado, sin explicaciones adicionales.
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres un experto en presupuestos de proyectos tecnol√≥gicos. Crea presupuestos realistas y detallados."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=600,
                temperature=0.2
            )
            
            contenido = response.choices[0].message.content.strip()
            return json.loads(self._extraer_json(contenido))
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error mejorando presupuesto detallado: {e}")
            return contenido_actual

    def _generar_estructura_base(self, parametros_proyecto: Dict[str, Any], empresa_nombre: str) -> Dict[str, Any]:
        """Genera la estructura base de la oferta con par√°metros calculados"""
        
        return {
            "projectInfo": {
                "name": self._formatear_texto_pdf(parametros_proyecto["nombre_proyecto"]),
                "client": self._acortar_nombre_cliente(parametros_proyecto["cliente"]),
                "date": parametros_proyecto["fecha"],
                "totalCost": parametros_proyecto["costo_total"],
                "timeline": parametros_proyecto["plazo"]
            },
            "sections": [
                {"id": "1", "title": "Resumen Ejecutivo", "type": "text", "content": "", "pageBreak": True},
                {"id": "2", "title": "Alcance del Servicio", "type": "list", "content": []},
                {"id": "3", "title": "Funcionalidades Clave del Sistema", "type": "text", "content": "", "pageBreak": True},
                {"id": "4", "title": "Tipos de Usuarios y Permisos", "type": "table", "content": {"headers": [], "rows": []}},
                {"id": "5", "title": "Infraestructura Tecnol√≥gica", "type": "text", "content": "", "pageBreak": True},
                {"id": "6", "title": "Equipo de Trabajo Asignado", "type": "table", "content": {"headers": [], "rows": []}},
                {"id": "7", "title": "Metodolog√≠a de Implementaci√≥n", "type": "text", "content": "", "pageBreak": True},
                {"id": "8", "title": "Garant√≠as y Soporte Post-implementaci√≥n", "type": "text", "content": ""},
                {"id": "9", "title": "Plan de Capacitaci√≥n", "type": "list", "content": []},
                {"id": "10", "title": "Experiencia y Referencias", "type": "text", "content": "", "pageBreak": True},
                {"id": "11", "title": "Factores Clave para el √âxito", "type": "list", "content": []},
                {"id": "12", "title": "Cronograma Detallado del Proyecto", "type": "table", "content": {"headers": [], "rows": []}},
                {"id": "13", "title": "Inversi√≥n y Condiciones de Pago", "type": "text", "content": ""},
                {"id": "14", "title": "Pol√≠tica de Diversidad e Inclusi√≥n", "type": "text", "content": ""}
            ],
            "styling": {
                "primaryColor": "#2563eb",
                "secondaryColor": "#1e40af",
                "fontFamily": "Arial, sans-serif"
            }
        }

    def _generar_contenido_por_secciones(self, estructura_base: Dict[str, Any], licitaciones: List[Dict[str, Any]], analisis_proyecto: Dict[str, Any], parametros_proyecto: Dict[str, Any]) -> Dict[str, Any]:
        """Genera contenido espec√≠fico para cada secci√≥n basado en las licitaciones"""
        
        print("üìù Generando contenido secci√≥n por secci√≥n...")
        
        # Extraer informaci√≥n clave
        cliente = parametros_proyecto["cliente"]
        sector = analisis_proyecto.get('sector', 'Tecnolog√≠a')
        objetivo = analisis_proyecto.get('objetivo_principal', 'Desarrollar sistema')
        
        # Generar contenido para cada secci√≥n
        for seccion in estructura_base["sections"]:
            seccion_id = seccion["id"]
            titulo = seccion["title"]
            
            print(f"üîß Generando: {titulo}")
            
            if titulo == "Resumen Ejecutivo":
                seccion["content"] = self._generar_resumen_ejecutivo_simple(licitaciones, cliente, sector, objetivo, parametros_proyecto)
            elif titulo == "Alcance del Servicio":
                seccion["content"] = self._generar_alcance_servicio_simple(licitaciones, cliente, sector, analisis_proyecto)
            elif titulo == "Funcionalidades Clave del Sistema":
                seccion["content"] = self._generar_funcionalidades_simple(licitaciones, cliente, sector, analisis_proyecto)
            elif titulo == "Tipos de Usuarios y Permisos":
                seccion["content"] = self._generar_usuarios_permisos_simple(licitaciones, cliente, sector)
            elif titulo == "Infraestructura Tecnol√≥gica":
                seccion["content"] = self._generar_infraestructura_simple(licitaciones, cliente, sector, analisis_proyecto)
            elif titulo == "Equipo de Trabajo Asignado":
                seccion["content"] = self._generar_equipo_simple(licitaciones, cliente, sector, parametros_proyecto)
            elif titulo == "Metodolog√≠a de Implementaci√≥n":
                seccion["content"] = self._generar_metodologia_simple(licitaciones, cliente, sector, parametros_proyecto)
            elif titulo == "Garant√≠as y Soporte Post-implementaci√≥n":
                seccion["content"] = self._generar_garantias_simple(licitaciones, cliente, sector)
            elif titulo == "Plan de Capacitaci√≥n":
                seccion["content"] = self._generar_capacitacion_simple(licitaciones, cliente, sector)
            elif titulo == "Experiencia y Referencias":
                seccion["content"] = self._generar_experiencia_simple(licitaciones, cliente, sector)
            elif titulo == "Factores Clave para el √âxito":
                seccion["content"] = self._generar_factores_exito_simple(licitaciones, cliente, sector)
            elif titulo == "Cronograma Detallado del Proyecto":
                seccion["content"] = self._generar_cronograma_simple(licitaciones, cliente, sector, parametros_proyecto)
            elif titulo == "Inversi√≥n y Condiciones de Pago":
                seccion["content"] = self._generar_inversion_simple(licitaciones, cliente, sector, parametros_proyecto)
            elif titulo == "Pol√≠tica de Diversidad e Inclusi√≥n":
                seccion["content"] = self._generar_politica_diversidad_simple(licitaciones, cliente, sector)
        
        return estructura_base

    def _generar_resumen_ejecutivo_simple(self, licitaciones: List[Dict[str, Any]], cliente: str, sector: str, objetivo: str, parametros_proyecto: Dict[str, Any]) -> str:
        """Genera resumen ejecutivo espec√≠fico para el cliente"""
        
        # Extraer informaci√≥n clave de las licitaciones
        info_clave = ""
        if licitaciones:
            licitacion = licitaciones[0]
            for seccion, contenido in licitacion['datos'].items():
                if any(palabra in seccion.lower() for palabra in ['objetivo', 'proposito', 'necesidad', 'problema']):
                    if isinstance(contenido, str) and len(contenido) > 50:
                        info_clave += f"{contenido[:200]} "
        
        prompt = f"""
        Genera un resumen ejecutivo espec√≠fico para {cliente} del sector {sector}.
        
        INFORMACI√ìN CLAVE:
        {info_clave}
        
        PROYECTO: {parametros_proyecto['nombre_proyecto']}
        OBJETIVO: {objetivo}
        COSTO: ${parametros_proyecto['costo_total']:,}
        PLAZO: {parametros_proyecto['plazo']}
        
        Genera un resumen ejecutivo de 300-400 palabras que:
        1. Mencione espec√≠ficamente a {cliente}
        2. Explique el objetivo del proyecto
        3. Describa el valor que aportar√° la soluci√≥n
        4. Mencione el costo y plazo
        5. Sea espec√≠fico para el sector {sector}
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres experto en res√∫menes ejecutivos de proyectos tecnol√≥gicos."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=400,
                temperature=0.3
            )
            return self._formatear_texto_pdf(response.choices[0].message.content.strip())
        except Exception as e:
            print(f"‚ö†Ô∏è Error generando resumen ejecutivo: {e}")
            return self._formatear_texto_pdf(f"GUX Technologies presenta esta propuesta t√©cnica para {cliente}, empresa del sector {sector}, con el objetivo de {objetivo}. El proyecto tiene un costo total de ${parametros_proyecto['costo_total']:,} y un plazo de {parametros_proyecto['plazo']}.")

    def _generar_funcionalidades_simple(self, licitaciones: List[Dict[str, Any]], cliente: str, sector: str, analisis_proyecto: Dict[str, Any]) -> str:
        """Genera funcionalidades espec√≠ficas basadas en las licitaciones"""
        
        # Extraer funcionalidades de las licitaciones
        funcionalidades = []
        if licitaciones:
            licitacion = licitaciones[0]
            for seccion, contenido in licitacion['datos'].items():
                if any(palabra in seccion.lower() for palabra in ['funcionalidad', 'requisito', 'caracteristica', 'modulo', 'sistema']):
                    if isinstance(contenido, str):
                        funcionalidades.append(f"{seccion}: {contenido[:100]}")
        
        prompt = f"""
        Genera funcionalidades espec√≠ficas para {cliente} del sector {sector}.
        
        FUNCIONALIDADES IDENTIFICADAS:
        {chr(10).join(funcionalidades[:5])}
        
        SECTOR: {sector}
        OBJETIVO: {analisis_proyecto.get('objetivo_principal', 'Desarrollar sistema')}
        
        Genera un texto de 400-500 palabras que describa:
        1. Funcionalidades espec√≠ficas para {cliente}
        2. M√≥dulos adaptados al sector {sector}
        3. Caracter√≠sticas t√©cnicas relevantes
        4. Beneficios espec√≠ficos para el cliente
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres experto en an√°lisis de sistemas y funcionalidades."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.3
            )
            return self._formatear_texto_pdf(response.choices[0].message.content.strip())
        except Exception as e:
            print(f"‚ö†Ô∏è Error generando funcionalidades: {e}")
            return self._formatear_texto_pdf(f"El sistema para {cliente} incluye funcionalidades espec√≠ficas del sector {sector}, dise√±adas para {analisis_proyecto.get('objetivo_principal', 'desarrollar el sistema requerido')}.")

    def _generar_alcance_servicio_simple(self, licitaciones: List[Dict[str, Any]], cliente: str, sector: str, analisis_proyecto: Dict[str, Any]) -> List[str]:
        """Genera alcance espec√≠fico basado en las licitaciones"""
        
        # Extraer alcance de las licitaciones
        alcance_items = []
        if licitaciones:
            licitacion = licitaciones[0]
            for seccion, contenido in licitacion['datos'].items():
                if any(palabra in seccion.lower() for palabra in ['alcance', 'servicio', 'entregable', 'funcionalidad']):
                    if isinstance(contenido, str):
                        # Acortar el contenido extra√≠do
                        contenido_corto = contenido[:40] if len(contenido) > 40 else contenido
                        alcance_items.append(f"{seccion}: {contenido_corto}")
        
        # Generar items espec√≠ficos del sector
        if "bancario" in sector.lower():
            alcance_items.extend([
                "Gesti√≥n de transacciones",
                "Reportes regulatorios",
                "Integraci√≥n bancaria",
                "Auditor√≠a y trazabilidad"
            ])
        elif "educativo" in sector.lower():
            alcance_items.extend([
                "Gesti√≥n acad√©mica",
                "Evaluaci√≥n y seguimiento",
                "Reportes educativos",
                "Integraci√≥n institucional"
            ])
        elif "salud" in sector.lower():
            alcance_items.extend([
                "Gesti√≥n de pacientes",
                "Historiales cl√≠nicos",
                "Citas y agenda",
                "Integraci√≥n de salud"
            ])
        else:
            alcance_items.extend([
                f"Desarrollo para {cliente}",
                "Gesti√≥n principal",
                "Reportes y an√°lisis",
                "Integraci√≥n de sistemas"
            ])
        
        return self._formatear_lista_pdf(alcance_items[:8])  # M√°ximo 8 items

    def _generar_usuarios_permisos_simple(self, licitaciones: List[Dict[str, Any]], cliente: str, sector: str) -> Dict[str, Any]:
        """Genera tabla de usuarios y permisos espec√≠fica"""
        
        # Definir usuarios seg√∫n el sector
        if "bancario" in sector.lower():
            usuarios = [
                ["Administrador del Sistema", "Gesti√≥n completa del sistema", "Acceso total"],
                ["Ejecutivo Bancario", "Gesti√≥n de transacciones", "Acceso operativo"],
                ["Supervisor", "Monitoreo y reportes", "Acceso de supervisi√≥n"],
                ["Auditor", "Revisi√≥n de transacciones", "Acceso de solo lectura"]
            ]
        elif "educativo" in sector.lower():
            usuarios = [
                ["Administrador Acad√©mico", "Gesti√≥n de programas y cursos", "Acceso administrativo"],
                ["Docente", "Gesti√≥n de evaluaciones", "Acceso docente"],
                ["Estudiante", "Acceso a recursos educativos", "Acceso limitado"],
                ["Coordinador", "Supervisi√≥n acad√©mica", "Acceso de coordinaci√≥n"]
            ]
        elif "salud" in sector.lower():
            usuarios = [
                ["Administrador Cl√≠nico", "Gesti√≥n de pacientes y citas", "Acceso administrativo"],
                ["M√©dico", "Gesti√≥n de historiales cl√≠nicos", "Acceso m√©dico"],
                ["Enfermero", "Registro de datos de pacientes", "Acceso de enfermer√≠a"],
                ["Recepcionista", "Gesti√≥n de citas", "Acceso de recepci√≥n"]
            ]
        else:
            usuarios = [
                ["Administrador del Sistema", "Gesti√≥n completa", "Acceso total"],
                ["Usuario Operativo", "Operaciones diarias", "Acceso operativo"],
                ["Supervisor", "Monitoreo y control", "Acceso de supervisi√≥n"],
                ["Usuario Final", "Uso del sistema", "Acceso limitado"]
            ]
        
        return {
            "headers": ["Tipo de Usuario", "Funciones Principales", "Nivel de Permisos"],
            "rows": usuarios
        }

    def _generar_infraestructura_simple(self, licitaciones: List[Dict[str, Any]], cliente: str, sector: str, analisis_proyecto: Dict[str, Any]) -> str:
        """Genera descripci√≥n de infraestructura espec√≠fica"""
        
        # Extraer requisitos t√©cnicos
        requisitos_tecnicos = analisis_proyecto.get('requisitos_tecnicos', [])
        tecnologias = analisis_proyecto.get('tecnologias_mencionadas', [])
        
        prompt = f"""
        Genera descripci√≥n de infraestructura para {cliente} del sector {sector}.
        
        REQUISITOS T√âCNICOS: {', '.join(requisitos_tecnicos)}
        TECNOLOG√çAS: {', '.join(tecnologias)}
        
        Genera texto de 300-400 palabras que describa:
        1. Arquitectura t√©cnica espec√≠fica para {cliente}
        2. Tecnolog√≠as adaptadas al sector {sector}
        3. Consideraciones de seguridad y escalabilidad
        4. Integraci√≥n con sistemas existentes
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres experto en infraestructura tecnol√≥gica."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=400,
                temperature=0.3
            )
            return self._formatear_texto_pdf(response.choices[0].message.content.strip())
        except Exception as e:
            print(f"‚ö†Ô∏è Error generando infraestructura: {e}")
            return self._formatear_texto_pdf(f"La infraestructura para {cliente} incluye tecnolog√≠as modernas y escalables, adaptadas espec√≠ficamente para el sector {sector}.")

    def _generar_equipo_simple(self, licitaciones: List[Dict[str, Any]], cliente: str, sector: str, parametros_proyecto: Dict[str, Any]) -> Dict[str, Any]:
        """Genera tabla de equipo espec√≠fico"""
        
        # Ajustar equipo seg√∫n complejidad y sector
        complejidad = "MEDIA"  # Por defecto
        if parametros_proyecto['costo_total'] > 60000000:
            complejidad = "ALTA"
        elif parametros_proyecto['costo_total'] < 30000000:
            complejidad = "BAJA"
        
        if complejidad == "ALTA":
            equipo = [
                ["Project Manager Senior", "Gesti√≥n integral del proyecto", "10+ a√±os de experiencia"],
                ["Arquitecto de Soluciones", "Dise√±o de arquitectura t√©cnica", "8+ a√±os de experiencia"],
                ["Tech Lead", "Liderazgo t√©cnico del equipo", "7+ a√±os de experiencia"],
                ["Desarrollador Senior", "Desarrollo de m√≥dulos cr√≠ticos", "5+ a√±os de experiencia"],
                ["Desarrollador Full Stack", "Desarrollo frontend y backend", "3+ a√±os de experiencia"],
                ["QA Engineer", "Aseguramiento de calidad", "4+ a√±os de experiencia"],
                ["DevOps Engineer", "Infraestructura y despliegue", "5+ a√±os de experiencia"],
                ["UX/UI Designer", "Dise√±o de interfaces", "4+ a√±os de experiencia"]
            ]
        elif complejidad == "BAJA":
            equipo = [
                ["Project Manager", "Gesti√≥n del proyecto", "5+ a√±os de experiencia"],
                ["Desarrollador Full Stack", "Desarrollo completo", "3+ a√±os de experiencia"],
                ["Desarrollador Frontend", "Interfaz de usuario", "2+ a√±os de experiencia"],
                ["QA Tester", "Pruebas del sistema", "2+ a√±os de experiencia"]
            ]
        else:  # MEDIA
            equipo = [
                ["Project Manager", "Gesti√≥n del proyecto", "7+ a√±os de experiencia"],
                ["Arquitecto de Software", "Dise√±o de arquitectura", "6+ a√±os de experiencia"],
                ["Desarrollador Senior", "Desarrollo de m√≥dulos", "4+ a√±os de experiencia"],
                ["Desarrollador Full Stack", "Desarrollo completo", "3+ a√±os de experiencia"],
                ["QA Engineer", "Aseguramiento de calidad", "3+ a√±os de experiencia"],
                ["DevOps Engineer", "Infraestructura", "4+ a√±os de experiencia"]
            ]
        
        return {
            "headers": ["Rol", "Responsabilidades Principales", "Experiencia Requerida"],
            "rows": equipo
        }

    def _generar_metodologia_simple(self, licitaciones: List[Dict[str, Any]], cliente: str, sector: str, parametros_proyecto: Dict[str, Any]) -> str:
        """Genera metodolog√≠a espec√≠fica"""
        
        plazo = parametros_proyecto['plazo']
        
        prompt = f"""
        Genera metodolog√≠a de implementaci√≥n para {cliente} del sector {sector}.
        
        PLAZO: {plazo}
        SECTOR: {sector}
        
        Genera texto de 400-500 palabras que describa:
        1. Metodolog√≠a √°gil adaptada al sector {sector}
        2. Fases de implementaci√≥n espec√≠ficas para {cliente}
        3. Entregables y hitos del proyecto
        4. Gesti√≥n de riesgos y calidad
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.modelo_backend,
                messages=[
                    {"role": "system", "content": "Eres experto en metodolog√≠as de implementaci√≥n de proyectos."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.3
            )
            return self._formatear_texto_pdf(response.choices[0].message.content.strip())
        except Exception as e:
            print(f"‚ö†Ô∏è Error generando metodolog√≠a: {e}")
            return self._formatear_texto_pdf(f"La metodolog√≠a para {cliente} utiliza un enfoque √°gil adaptado al sector {sector}, con un plazo de {plazo} y entregables incrementales.")

    def _generar_garantias_simple(self, licitaciones: List[Dict[str, Any]], cliente: str, sector: str) -> str:
        """Genera garant√≠as espec√≠ficas"""
        
        return self._formatear_texto_pdf(f"GUX Technologies ofrece garant√≠as espec√≠ficas para {cliente} del sector {sector}, incluyendo soporte t√©cnico 24/7 durante los primeros 6 meses post-implementaci√≥n, mantenimiento preventivo mensual, y actualizaciones de seguridad trimestrales. Se incluye capacitaci√≥n inicial para el equipo y documentaci√≥n t√©cnica completa.")

    def _generar_capacitacion_simple(self, licitaciones: List[Dict[str, Any]], cliente: str, sector: str) -> List[str]:
        """Genera plan de capacitaci√≥n espec√≠fico"""
        
        return self._formatear_lista_pdf([
            f"Capacitaci√≥n inicial para administradores",
            f"Talleres espec√≠ficos del sector {sector}",
            f"Capacitaci√≥n en funcionalidades avanzadas",
            f"Entrenamiento en reportes y an√°lisis",
            f"Capacitaci√≥n en mantenimiento del sistema",
            f"Talleres de resoluci√≥n de problemas",
            f"Capacitaci√≥n en nuevas funcionalidades",
            f"Soporte continuo y consultor√≠a t√©cnica"
        ])

    def _generar_experiencia_simple(self, licitaciones: List[Dict[str, Any]], cliente: str, sector: str) -> str:
        """Genera experiencia y referencias espec√≠ficas"""
        
        return self._formatear_texto_pdf(f"GUX Technologies cuenta con amplia experiencia en el sector {sector}, habiendo desarrollado soluciones similares para empresas del mismo rubro. Nuestro equipo tiene m√°s de 10 a√±os de experiencia en desarrollo de software empresarial y ha completado exitosamente m√°s de 50 proyectos en diversos sectores, incluyendo casos de √©xito espec√≠ficos en {sector}.")

    def _generar_factores_exito_simple(self, licitaciones: List[Dict[str, Any]], cliente: str, sector: str) -> List[str]:
        """Genera factores de √©xito espec√≠ficos"""
        
        return self._formatear_lista_pdf([
            f"Compromiso total del equipo de {cliente}",
            f"Comunicaci√≥n efectiva entre GUX Technologies y {cliente}",
            f"Definici√≥n clara de requisitos del sector {sector}",
            f"Capacitaci√≥n adecuada del personal",
            f"Infraestructura t√©cnica apropiada",
            f"Apoyo de la alta direcci√≥n",
            f"Plan de contingencia para mitigar riesgos",
            f"Monitoreo continuo del progreso del proyecto"
        ])

    def _generar_cronograma_simple(self, licitaciones: List[Dict[str, Any]], cliente: str, sector: str, parametros_proyecto: Dict[str, Any]) -> Dict[str, Any]:
        """Genera cronograma espec√≠fico"""
        
        plazo = parametros_proyecto['plazo']
        meses = int(plazo.split()[0]) if plazo.split()[0].isdigit() else 5
        
        fases = []
        if meses <= 3:
            fases = [
                ["Fase 1: An√°lisis y Dise√±o", "Semanas 1-2", "Requisitos y arquitectura"],
                ["Fase 2: Desarrollo", "Semanas 3-8", "Desarrollo del sistema"],
                ["Fase 3: Pruebas e Implementaci√≥n", "Semanas 9-12", "Testing y despliegue"]
            ]
        elif meses <= 6:
            fases = [
                ["Fase 1: An√°lisis y Dise√±o", "Semanas 1-4", "Requisitos y arquitectura"],
                ["Fase 2: Desarrollo Core", "Semanas 5-16", "Desarrollo de m√≥dulos principales"],
                ["Fase 3: Desarrollo Avanzado", "Semanas 17-20", "M√≥dulos especializados"],
                ["Fase 4: Pruebas e Implementaci√≥n", "Semanas 21-24", "Testing y despliegue"]
            ]
        else:
            fases = [
                ["Fase 1: An√°lisis y Dise√±o", "Semanas 1-6", "Requisitos y arquitectura"],
                ["Fase 2: Desarrollo Core", "Semanas 7-20", "Desarrollo de m√≥dulos principales"],
                ["Fase 3: Desarrollo Avanzado", "Semanas 21-28", "M√≥dulos especializados"],
                ["Fase 4: Integraci√≥n", "Semanas 29-32", "Integraci√≥n de sistemas"],
                ["Fase 5: Pruebas e Implementaci√≥n", "Semanas 33-36", "Testing y despliegue"]
            ]
        
        return {
            "headers": ["Fase", "Duraci√≥n", "Entregables Principales"],
            "rows": fases
        }

    def _generar_inversion_simple(self, licitaciones: List[Dict[str, Any]], cliente: str, sector: str, parametros_proyecto: Dict[str, Any]) -> str:
        """Genera informaci√≥n de inversi√≥n espec√≠fica"""
        
        costo = parametros_proyecto['costo_total']
        plazo = parametros_proyecto['plazo']
        
        return self._formatear_texto_pdf(f"La inversi√≥n total para el proyecto de {cliente} es de ${costo:,} CLP, con un plazo de {plazo}. El pago se estructura en cuotas: 30% al inicio del proyecto, 40% durante el desarrollo, y 30% al finalizar la implementaci√≥n. Incluye desarrollo, implementaci√≥n, capacitaci√≥n y soporte post-implementaci√≥n.")

    def _generar_politica_diversidad_simple(self, licitaciones: List[Dict[str, Any]], cliente: str, sector: str) -> str:
        """Genera pol√≠tica de diversidad e inclusi√≥n espec√≠fica"""
        
        # Contenido basado en ofertas hist√≥ricas
        politica_base = f"""
GUX Technologies se compromete firmemente con la diversidad e inclusi√≥n en todos nuestros proyectos, incluyendo el desarrollo de la soluci√≥n para {cliente}. Nuestra pol√≠tica se fundamenta en los siguientes principios:

**Compromiso con la Diversidad:**
‚Ä¢ Promovemos activamente la participaci√≥n de profesionales de diferentes g√©neros, edades, or√≠genes √©tnicos y culturales en nuestros equipos de desarrollo.
‚Ä¢ Fomentamos la inclusi√≥n de personas con diferentes capacidades y perspectivas, reconociendo que la diversidad enriquece la creatividad y la innovaci√≥n en el desarrollo de soluciones tecnol√≥gicas.

**Equipo Inclusivo:**
‚Ä¢ Nuestro equipo de trabajo para el proyecto de {cliente} refleja nuestra pol√≠tica de diversidad, incluyendo profesionales con diferentes experiencias y perspectivas.
‚Ä¢ Promovemos un ambiente de trabajo respetuoso e inclusivo donde todas las voces son valoradas y consideradas en el proceso de desarrollo.

**Desarrollo de Soluciones Inclusivas:**
‚Ä¢ Las soluciones tecnol√≥gicas que desarrollamos para {cliente} est√°n dise√±adas considerando la accesibilidad y usabilidad para usuarios diversos.
‚Ä¢ Incorporamos principios de dise√±o universal que aseguran que la plataforma sea accesible para personas con diferentes capacidades.

**Capacitaci√≥n y Sensibilizaci√≥n:**
‚Ä¢ Nuestro equipo recibe capacitaci√≥n continua en temas de diversidad e inclusi√≥n.
‚Ä¢ Promovemos la sensibilizaci√≥n sobre la importancia de crear entornos de trabajo inclusivos y respetuosos.

**Medici√≥n y Seguimiento:**
‚Ä¢ Establecemos m√©tricas para medir el progreso en diversidad e inclusi√≥n en nuestros proyectos.
‚Ä¢ Realizamos evaluaciones peri√≥dicas para asegurar que nuestras pol√≠ticas se implementen efectivamente.

Este compromiso con la diversidad e inclusi√≥n no solo es parte de nuestros valores corporativos, sino que tambi√©n contribuye a la calidad y efectividad de las soluciones que desarrollamos para {cliente}, asegurando que sean accesibles, relevantes y beneficiosas para todos los usuarios finales.
"""
        
        return self._formatear_texto_pdf(politica_base.strip())

    def _formatear_texto_pdf(self, texto: str, max_caracteres: int = 70) -> str:
        """Formatea el texto agregando saltos de l√≠nea para mejor visualizaci√≥n en PDF"""
        
        if not texto:
            return texto
        
        # Dividir el texto en p√°rrafos
        parrafos = texto.split('\n\n')
        parrafos_formateados = []
        
        for parrafo in parrafos:
            if parrafo.strip():
                # Formatear cada p√°rrafo
                parrafo_formateado = self._formatear_parrafo(parrafo.strip(), max_caracteres)
                parrafos_formateados.append(parrafo_formateado)
        
        return '\n\n'.join(parrafos_formateados)

    def _formatear_parrafo(self, parrafo: str, max_caracteres: int = 70) -> str:
        """Formatea un p√°rrafo agregando saltos de l√≠nea"""
        
        # Si el p√°rrafo es muy corto, no necesita formateo
        if len(parrafo) <= max_caracteres:
            return parrafo
        
        # Dividir en palabras
        palabras = parrafo.split()
        lineas = []
        linea_actual = ""
        
        for palabra in palabras:
            # Si agregar la palabra excede el l√≠mite, crear nueva l√≠nea
            if len(linea_actual + " " + palabra) > max_caracteres:
                if linea_actual:
                    lineas.append(linea_actual.strip())
                    linea_actual = palabra
                else:
                    # Si la palabra es muy larga, dividirla
                    if len(palabra) > max_caracteres:
                        lineas.append(palabra[:max_caracteres])
                        linea_actual = palabra[max_caracteres:]
                    else:
                        linea_actual = palabra
            else:
                linea_actual += " " + palabra if linea_actual else palabra
        
        # Agregar la √∫ltima l√≠nea
        if linea_actual:
            lineas.append(linea_actual.strip())
        
        return '\n'.join(lineas)

    def _formatear_lista_pdf(self, lista: List[str], max_caracteres: int = 45) -> List[str]:
        """Formatea cada elemento de una lista para mejor visualizaci√≥n en PDF"""
        
        if not lista:
            return lista
        
        lista_formateada = []
        for elemento in lista:
            if isinstance(elemento, str):
                # Si el elemento es muy largo, dividirlo en m√∫ltiples puntos
                if len(elemento) > max_caracteres:  # Si excede el l√≠mite
                    elementos_divididos = self._dividir_elemento_lista(elemento, max_caracteres)
                    lista_formateada.extend(elementos_divididos)
                else:
                    lista_formateada.append(elemento)
            else:
                lista_formateada.append(elemento)
        
        return lista_formateada

    def _dividir_elemento_lista(self, elemento: str, max_caracteres: int = 45) -> List[str]:
        """Divide un elemento largo de lista en m√∫ltiples puntos m√°s cortos"""
        
        # Dividir por comas, puntos y conectores comunes
        divisores = [', ', '. ', ' y ', ' o ', '; ', ' adem√°s ', ' tambi√©n ', ' incluyendo ', ' para ', ' con ', ' mediante ', ' a trav√©s de ']
        
        # Buscar el mejor punto de divisi√≥n
        mejor_division = None
        mejor_posicion = -1
        
        for divisor in divisores:
            if divisor in elemento:
                posicion = elemento.find(divisor)
                if posicion > 20 and posicion < len(elemento) - 10:  # Buscar divisi√≥n m√°s temprana
                    if mejor_posicion == -1 or posicion < mejor_posicion:
                        mejor_posicion = posicion
                        mejor_division = divisor
        
        if mejor_division and mejor_posicion > 0:
            # Dividir en el punto encontrado
            parte1 = elemento[:mejor_posicion].strip()
            parte2 = elemento[mejor_posicion + len(mejor_division):].strip()
            
            elementos = []
            if parte1:
                elementos.append(parte1)
            if parte2:
                elementos.append(parte2)
            
            return elementos
        
        # Si no se puede dividir l√≥gicamente, dividir por longitud
        if len(elemento) > max_caracteres:
            palabras = elemento.split()
            elementos = []
            elemento_actual = ""
            
            for palabra in palabras:
                if len(elemento_actual + " " + palabra) <= max_caracteres:
                    elemento_actual += " " + palabra if elemento_actual else palabra
                else:
                    if elemento_actual:
                        elementos.append(elemento_actual.strip())
                    elemento_actual = palabra
            
            if elemento_actual:
                elementos.append(elemento_actual.strip())
            
            return elementos
        
        return [elemento]

    def _acortar_nombre_cliente(self, nombre_cliente: str) -> str:
        """Acorta el nombre del cliente para evitar saltos de l√≠nea"""
        
        if not nombre_cliente:
            return nombre_cliente
        
        # Si el nombre es muy largo, tomar solo la primera parte
        if len(nombre_cliente) > 30:
            # Buscar palabras clave para acortar
            palabras = nombre_cliente.split()
            
            # Si tiene m√°s de 3 palabras, tomar las primeras 2-3
            if len(palabras) > 3:
                return " ".join(palabras[:3])
            else:
                # Si es una sola palabra larga, truncar
                return nombre_cliente[:30]
        
        return nombre_cliente